
smartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ac  080065ac  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b4  080065b4  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  080065bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000288  08006844  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  08006844  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fea5  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d15  00000000  00000000  00030199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccb  00000000  00000000  00033f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016614  00000000  00000000  00034c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012191  00000000  00000000  0004b21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083171  00000000  00000000  0005d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d90  00000000  00000000  000e0524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e52b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000288 	.word	0x20000288
 8000158:	00000000 	.word	0x00000000
 800015c:	080062cc 	.word	0x080062cc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000028c 	.word	0x2000028c
 8000178:	080062cc 	.word	0x080062cc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800049c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00b      	beq.n	80004bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a4:	e000      	b.n	80004a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <_write>:
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);

int _write(int file, char *ptr, int len) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e009      	b.n	80004ee <_write+0x26>
		ITM_SendChar(*ptr++);
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	1c5a      	adds	r2, r3, #1
 80004de:	60ba      	str	r2, [r7, #8]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ffca 	bl	800047c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3301      	adds	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	dbf1      	blt.n	80004da <_write+0x12>
	}
	return len;
 80004f6:	687b      	ldr	r3, [r7, #4]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <compareTime>:

int compareTime(devTime_t _first, devTime_t _second) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	80b8      	strh	r0, [r7, #4]
 8000508:	8039      	strh	r1, [r7, #0]
	if (_first.m_hour == _second.m_hour && _first.m_min == _second.m_min)
 800050a:	793a      	ldrb	r2, [r7, #4]
 800050c:	783b      	ldrb	r3, [r7, #0]
 800050e:	429a      	cmp	r2, r3
 8000510:	d105      	bne.n	800051e <compareTime+0x1e>
 8000512:	797a      	ldrb	r2, [r7, #5]
 8000514:	787b      	ldrb	r3, [r7, #1]
 8000516:	429a      	cmp	r2, r3
 8000518:	d101      	bne.n	800051e <compareTime+0x1e>
		return 0;
 800051a:	2300      	movs	r3, #0
 800051c:	e011      	b.n	8000542 <compareTime+0x42>

	if (_first.m_hour > _second.m_hour)
 800051e:	793a      	ldrb	r2, [r7, #4]
 8000520:	783b      	ldrb	r3, [r7, #0]
 8000522:	429a      	cmp	r2, r3
 8000524:	d901      	bls.n	800052a <compareTime+0x2a>
		return 1;
 8000526:	2301      	movs	r3, #1
 8000528:	e00b      	b.n	8000542 <compareTime+0x42>

	if ((_first.m_hour == _second.m_hour) && (_first.m_min > _second.m_min))
 800052a:	793a      	ldrb	r2, [r7, #4]
 800052c:	783b      	ldrb	r3, [r7, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	d105      	bne.n	800053e <compareTime+0x3e>
 8000532:	797a      	ldrb	r2, [r7, #5]
 8000534:	787b      	ldrb	r3, [r7, #1]
 8000536:	429a      	cmp	r2, r3
 8000538:	d901      	bls.n	800053e <compareTime+0x3e>
		return 1;
 800053a:	2301      	movs	r3, #1
 800053c:	e001      	b.n	8000542 <compareTime+0x42>

	return -1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <isInTime>:

bool isInTime(devTime_t _current, devTime_t _timeStart, devTime_t _timeStop) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	81b8      	strh	r0, [r7, #12]
 8000554:	8139      	strh	r1, [r7, #8]
 8000556:	80ba      	strh	r2, [r7, #4]
	if (compareTime(_timeStart, _timeStop) == 0)
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	68b8      	ldr	r0, [r7, #8]
 800055c:	f7ff ffd0 	bl	8000500 <compareTime>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d101      	bne.n	800056a <isInTime+0x1e>
		return false;
 8000566:	2300      	movs	r3, #0
 8000568:	e02a      	b.n	80005c0 <isInTime+0x74>

	if (compareTime(_timeStart, _timeStop) < 0) {
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	f7ff ffc7 	bl	8000500 <compareTime>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	da0f      	bge.n	8000598 <isInTime+0x4c>
		if (compareTime(_current, _timeStart) >= 0
 8000578:	68b9      	ldr	r1, [r7, #8]
 800057a:	68f8      	ldr	r0, [r7, #12]
 800057c:	f7ff ffc0 	bl	8000500 <compareTime>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	db1b      	blt.n	80005be <isInTime+0x72>
				&& compareTime(_current, _timeStop) <= 0) {
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f7ff ffb9 	bl	8000500 <compareTime>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	dc14      	bgt.n	80005be <isInTime+0x72>
			return true;
 8000594:	2301      	movs	r3, #1
 8000596:	e013      	b.n	80005c0 <isInTime+0x74>
		}
	} else {
		if ((compareTime(_current, _timeStop) <= 0 && _current.m_hour >= 0)
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	68f8      	ldr	r0, [r7, #12]
 800059c:	f7ff ffb0 	bl	8000500 <compareTime>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	dd09      	ble.n	80005ba <isInTime+0x6e>
				|| (compareTime(_current, _timeStart) >= 0
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff ffa9 	bl	8000500 <compareTime>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db04      	blt.n	80005be <isInTime+0x72>
						&& _current.m_hour < 24)) {
 80005b4:	7b3b      	ldrb	r3, [r7, #12]
 80005b6:	2b17      	cmp	r3, #23
 80005b8:	d801      	bhi.n	80005be <isInTime+0x72>
			return true;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <isInTime+0x74>
		}
	}

	return false;
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <increaseTimeMin>:

void increaseTimeMin(devTime_t *_time) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if (!_time)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01a      	beq.n	800060c <increaseTimeMin+0x44>
		return;

	_time->m_min++;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	785b      	ldrb	r3, [r3, #1]
 80005da:	3301      	adds	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	705a      	strb	r2, [r3, #1]
	if (_time->m_min >= 60) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	2b3b      	cmp	r3, #59	; 0x3b
 80005e8:	d911      	bls.n	800060e <increaseTimeMin+0x46>
		_time->m_min = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	705a      	strb	r2, [r3, #1]
		_time->m_hour++;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	701a      	strb	r2, [r3, #0]
		if (_time->m_hour >= 24)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b17      	cmp	r3, #23
 8000602:	d904      	bls.n	800060e <increaseTimeMin+0x46>
			_time->m_hour = 0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	e000      	b.n	800060e <increaseTimeMin+0x46>
		return;
 800060c:	bf00      	nop
	}
}
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <board_init>:

TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

void board_init() {
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
	HAL_Init();
 800061a:	f001 fe6f 	bl	80022fc <HAL_Init>
	SystemClock_Config();
 800061e:	f000 f80b 	bl	8000638 <SystemClock_Config>
	MX_GPIO_Init();
 8000622:	f000 f949 	bl	80008b8 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000626:	f000 f855 	bl	80006d4 <MX_SPI2_Init>
	MX_TIM4_Init();
 800062a:	f000 f887 	bl	800073c <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800062e:	f000 f919 	bl	8000864 <MX_USART2_UART_Init>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b092      	sub	sp, #72	; 0x48
 800063c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f8e4 	bl	8005814 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <SystemClock_Config+0x98>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000662:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <SystemClock_Config+0x98>)
 8000664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000668:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2300      	movs	r3, #0
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800067e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000684:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fb82 	bl	8002d98 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x66>
		Error_Handler();
 800069a:	f000 f97f 	bl	800099c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006b2:	463b      	mov	r3, r7
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fe9e 	bl	80033f8 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x8e>
		Error_Handler();
 80006c2:	f000 f96b 	bl	800099c <Error_Handler>
	}
}
 80006c6:	bf00      	nop
 80006c8:	3748      	adds	r7, #72	; 0x48
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI2_Init+0x60>)
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_SPI2_Init+0x64>)
 80006dc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_SPI2_Init+0x60>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_SPI2_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI2_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_SPI2_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI2_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_SPI2_Init+0x60>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_SPI2_Init+0x60>)
 8000708:	2208      	movs	r2, #8
 800070a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI2_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_SPI2_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI2_Init+0x60>)
 800071a:	220a      	movs	r2, #10
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_SPI2_Init+0x60>)
 8000720:	f003 f8ee 	bl	8003900 <HAL_SPI_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_SPI2_Init+0x5a>
		Error_Handler();
 800072a:	f000 f937 	bl	800099c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002a4 	.word	0x200002a4
 8000738:	40003800 	.word	0x40003800

0800073c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <MX_TIM4_Init+0x120>)
 8000768:	4a3d      	ldr	r2, [pc, #244]	; (8000860 <MX_TIM4_Init+0x124>)
 800076a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 31;
 800076c:	4b3b      	ldr	r3, [pc, #236]	; (800085c <MX_TIM4_Init+0x120>)
 800076e:	221f      	movs	r2, #31
 8000770:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_TIM4_Init+0x120>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 99;
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <MX_TIM4_Init+0x120>)
 800077a:	2263      	movs	r2, #99	; 0x63
 800077c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_TIM4_Init+0x120>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <MX_TIM4_Init+0x120>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800078a:	4834      	ldr	r0, [pc, #208]	; (800085c <MX_TIM4_Init+0x120>)
 800078c:	f003 f934 	bl	80039f8 <HAL_TIM_Base_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM4_Init+0x5e>
		Error_Handler();
 8000796:	f000 f901 	bl	800099c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	4619      	mov	r1, r3
 80007a6:	482d      	ldr	r0, [pc, #180]	; (800085c <MX_TIM4_Init+0x120>)
 80007a8:	f003 fb06 	bl	8003db8 <HAL_TIM_ConfigClockSource>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM4_Init+0x7a>
		Error_Handler();
 80007b2:	f000 f8f3 	bl	800099c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80007b6:	4829      	ldr	r0, [pc, #164]	; (800085c <MX_TIM4_Init+0x120>)
 80007b8:	f003 f95d 	bl	8003a76 <HAL_TIM_PWM_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM4_Init+0x8a>
		Error_Handler();
 80007c2:	f000 f8eb 	bl	800099c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <MX_TIM4_Init+0x120>)
 80007d6:	f003 fdc9 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0xa8>
			!= HAL_OK) {
		Error_Handler();
 80007e0:	f000 f8dc 	bl	800099c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e4:	2360      	movs	r3, #96	; 0x60
 80007e6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_TIM4_Init+0x120>)
 80007fc:	f003 fa1a 	bl	8003c34 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM4_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 8000806:	f000 f8c9 	bl	800099c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800080a:	463b      	mov	r3, r7
 800080c:	2204      	movs	r2, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <MX_TIM4_Init+0x120>)
 8000812:	f003 fa0f 	bl	8003c34 <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM4_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 800081c:	f000 f8be 	bl	800099c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000820:	463b      	mov	r3, r7
 8000822:	2208      	movs	r2, #8
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_TIM4_Init+0x120>)
 8000828:	f003 fa04 	bl	8003c34 <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM4_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8000832:	f000 f8b3 	bl	800099c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000836:	463b      	mov	r3, r7
 8000838:	220c      	movs	r2, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM4_Init+0x120>)
 800083e:	f003 f9f9 	bl	8003c34 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM4_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8000848:	f000 f8a8 	bl	800099c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM4_Init+0x120>)
 800084e:	f001 f88f 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002fc 	.word	0x200002fc
 8000860:	40000800 	.word	0x40000800

08000864 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000874:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f003 fdc4 	bl	8004428 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80008a6:	f000 f879 	bl	800099c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000033c 	.word	0x2000033c
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <MX_GPIO_Init+0xd4>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a2e      	ldr	r2, [pc, #184]	; (800098c <MX_GPIO_Init+0xd4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <MX_GPIO_Init+0xd4>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_GPIO_Init+0xd4>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a28      	ldr	r2, [pc, #160]	; (800098c <MX_GPIO_Init+0xd4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_GPIO_Init+0xd4>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_GPIO_Init+0xd4>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <MX_GPIO_Init+0xd4>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0xd4>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin | SPI2_CS_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800091c:	481c      	ldr	r0, [pc, #112]	; (8000990 <MX_GPIO_Init+0xd8>)
 800091e:	f002 fa22 	bl	8002d66 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, OUT_BUZZER_Pin | OUT_FAN_Pin | OUT_DOOR_Pin,
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000928:	481a      	ldr	r0, [pc, #104]	; (8000994 <MX_GPIO_Init+0xdc>)
 800092a:	f002 fa1c 	bl	8002d66 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : IN_FIRE_SS_Pin IN_HUMAN_DECT_Pin */
	GPIO_InitStruct.Pin = IN_FIRE_SS_Pin | IN_HUMAN_DECT_Pin;
 800092e:	2303      	movs	r3, #3
 8000930:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <MX_GPIO_Init+0xe0>)
 8000942:	f002 f879 	bl	8002a38 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI_RST_Pin SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SPI2_RST_Pin | SPI2_CS_Pin;
 8000946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800094a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_GPIO_Init+0xd8>)
 8000960:	f002 f86a 	bl	8002a38 <HAL_GPIO_Init>

	/*Configure GPIO pins : OUT_BUZZER_Pin OUT_FAN_Pin OUT_DOOR_Pin */
	GPIO_InitStruct.Pin = OUT_BUZZER_Pin | OUT_FAN_Pin | OUT_DOOR_Pin;
 8000964:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000968:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_GPIO_Init+0xdc>)
 800097e:	f002 f85b 	bl	8002a38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400
 8000994:	40020000 	.word	0x40020000
 8000998:	40020800 	.word	0x40020800

0800099c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>

080009a6 <elapsed_timer_reset>:
}elapsed_timer_t;
/**
 * @brief
 * @param _self
 */
static inline void elapsed_timer_reset(elapsed_timer_t* _self){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
    _self->m_start_time = get_tick_count();
 80009ae:	f000 f840 	bl	8000a32 <get_tick_count>
 80009b2:	4602      	mov	r2, r0
 80009b4:	460b      	mov	r3, r1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	605a      	str	r2, [r3, #4]
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <elapsed_timer_resetz>:
/**
 * @brief
 * @param _self
 * @param _duration
 */
static inline void elapsed_timer_resetz(elapsed_timer_t* _self, int32_t _duration){
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
    _self->m_duration = _duration;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	601a      	str	r2, [r3, #0]
    _self->m_start_time = get_tick_count();
 80009d2:	f000 f82e 	bl	8000a32 <get_tick_count>
 80009d6:	4602      	mov	r2, r0
 80009d8:	460b      	mov	r3, r1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	605a      	str	r2, [r3, #4]
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <elapsed_timer_get_remain>:
/**
 * @brief
 * @param _self
 * @return
 */
static inline int32_t elapsed_timer_get_remain(elapsed_timer_t* _self){
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
    int32_t remain_time = get_tick_count() - _self->m_start_time;
 80009ee:	f000 f820 	bl	8000a32 <get_tick_count>
 80009f2:	4602      	mov	r2, r0
 80009f4:	460b      	mov	r3, r1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	60fb      	str	r3, [r7, #12]
    if(remain_time >= _self->m_duration){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	db01      	blt.n	8000a0c <elapsed_timer_get_remain+0x26>
        return 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e003      	b.n	8000a14 <elapsed_timer_get_remain+0x2e>
    }else{
        return _self->m_duration - remain_time;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	1ad3      	subs	r3, r2, r3
    }
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <log_put>:
#define FIRE_TIMEOUT 3000

void controlLight(uint8_t _light, uint8_t _stt);


void log_put(const char* _log) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    printf("%s\n", _log);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f004 fd97 	bl	8005558 <puts>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <get_tick_count>:

int64_t get_tick_count(){
 8000a32:	b5b0      	push	{r4, r5, r7, lr}
 8000a34:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000a36:	f001 fcc5 	bl	80023c4 <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	461c      	mov	r4, r3
 8000a40:	4615      	mov	r5, r2
 8000a42:	4622      	mov	r2, r4
 8000a44:	462b      	mov	r3, r5
}
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}

08000a4c <serialHostSendIfDefault>:


int32_t serialHostSendIfDefault(const uint8_t* _data, int32_t _len, int32_t _timeout, void* _arg){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
    return HAL_UART_Transmit(&huart2, (uint8_t*)_data, _len, _timeout);
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <serialHostSendIfDefault+0x28>)
 8000a64:	f003 fd30 	bl	80044c8 <HAL_UART_Transmit>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000033c 	.word	0x2000033c

08000a78 <saveConfig>:
	uint8_t m_focre_fan;
	uint32_t m_minCount;
}app_t;
app_t app;

void saveConfig(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000a7e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000a80:	f001 fe66 	bl	8002750 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    EraseInitStruct.PageAddress = CONFIG_FLASH_ADDR;
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <saveConfig+0xec>)
 8000a8c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
    EraseInitStruct.NbPages     = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
    uint32_t PAGEError;

    if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)    {
 8000a96:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8000a9a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 ff4f 	bl	8002944 <HAL_FLASHEx_Erase>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <saveConfig+0x3e>
    	PAGEError = HAL_FLASH_GetError();
 8000aac:	f001 fe9a 	bl	80027e4 <HAL_FLASH_GetError>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    }

    uint32_t configData[256] = {0,};
 8000ab6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000aba:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f004 fea4 	bl	8005814 <memset>

    configData[0] = MAGIC_VALUE;
 8000acc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000ad0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000ad4:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
 8000ad8:	601a      	str	r2, [r3, #0]

    memcpy(&configData[1], &app.m_devInfo, sizeof(dev_info_t));
 8000ada:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000ade:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000ae2:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <saveConfig+0xf0>)
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	2253      	movs	r2, #83	; 0x53
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 ff1d 	bl	800592a <memcpy>

    for(int i = 0; i < 256; i++){
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8000af6:	e024      	b.n	8000b42 <saveConfig+0xca>
    	 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CONFIG_FLASH_ADDR + i*4, configData[i]) != HAL_OK){
 8000af8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000b02:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8000b06:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8000b0a:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8000b0e:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8000b12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000b16:	4619      	mov	r1, r3
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f001 fde9 	bl	80026f0 <HAL_FLASH_Program>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d009      	beq.n	8000b38 <saveConfig+0xc0>
    		 PAGEError = HAL_FLASH_GetError();
 8000b24:	f001 fe5e 	bl	80027e4 <HAL_FLASH_GetError>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    		 LOG_INF(TAG, "Save config FAILED");
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <saveConfig+0xf4>)
 8000b30:	490f      	ldr	r1, [pc, #60]	; (8000b70 <saveConfig+0xf8>)
 8000b32:	2002      	movs	r0, #2
 8000b34:	f001 fb50 	bl	80021d8 <sm_logger_show>
    for(int i = 0; i < 256; i++){
 8000b38:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8000b42:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b46:	2bff      	cmp	r3, #255	; 0xff
 8000b48:	ddd6      	ble.n	8000af8 <saveConfig+0x80>
    	 }
    }


    LOG_INF(TAG, "Save config SUCCEED");
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <saveConfig+0xfc>)
 8000b4c:	4908      	ldr	r1, [pc, #32]	; (8000b70 <saveConfig+0xf8>)
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f001 fb42 	bl	80021d8 <sm_logger_show>
	HAL_FLASH_Lock();
 8000b54:	f001 fe36 	bl	80027c4 <HAL_FLASH_Lock>
}
 8000b58:	bf00      	nop
 8000b5a:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0801fc00 	.word	0x0801fc00
 8000b68:	20000384 	.word	0x20000384
 8000b6c:	080062e4 	.word	0x080062e4
 8000b70:	080062f8 	.word	0x080062f8
 8000b74:	08006300 	.word	0x08006300

08000b78 <loadConfig>:

void loadConfig(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000b7e:	af00      	add	r7, sp, #0
	uint8_t* storage_buff = (uint8_t*)CONFIG_FLASH_ADDR;
 8000b80:	4b4a      	ldr	r3, [pc, #296]	; (8000cac <loadConfig+0x134>)
 8000b82:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint32_t configData[256] = {0,};
 8000b86:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000b8a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b94:	461a      	mov	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f004 fe3c 	bl	8005814 <memset>

	memcpy(configData, storage_buff, sizeof(configData));
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba4:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 febe 	bl	800592a <memcpy>

	if(configData[0] == MAGIC_VALUE){
 8000bae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000bb2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 3f5a 	cmp.w	r3, #1515870810	; 0x5a5a5a5a
 8000bbc:	d118      	bne.n	8000bf0 <loadConfig+0x78>
		memcpy(&app.m_devInfo, &configData[1], sizeof(dev_info_t));
 8000bbe:	4a3c      	ldr	r2, [pc, #240]	; (8000cb0 <loadConfig+0x138>)
 8000bc0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000bc4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000bc8:	4610      	mov	r0, r2
 8000bca:	3304      	adds	r3, #4
 8000bcc:	2253      	movs	r2, #83	; 0x53
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f004 feab 	bl	800592a <memcpy>
		if(app.m_devInfo.m_hallwayDetectHuman)
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <loadConfig+0x138>)
 8000bd6:	799b      	ldrb	r3, [r3, #6]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <loadConfig+0x6c>
			app.m_devInfo.m_light[HALLWAY_LIGHT].m_stt = false;
 8000bdc:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <loadConfig+0x138>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		app.m_devInfo.m_doorStt = false;
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <loadConfig+0x138>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	709a      	strb	r2, [r3, #2]
		app.m_devInfo.m_fireBuzzer = false;
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <loadConfig+0x138>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	715a      	strb	r2, [r3, #5]
	}

	char emptyArray[8] = {0,}; // Tạo mảng chứa toàn số 0
 8000bf0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000bf4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]

	if(memcmp(app.m_devInfo.m_doorKey, emptyArray, 8) == 0){
 8000c00:	463b      	mov	r3, r7
 8000c02:	2208      	movs	r2, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <loadConfig+0x13c>)
 8000c08:	f004 fdf4 	bl	80057f4 <memcmp>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <loadConfig+0xa4>
		memset(app.m_devInfo.m_doorKey, '8', 8);
 8000c12:	2208      	movs	r2, #8
 8000c14:	2138      	movs	r1, #56	; 0x38
 8000c16:	4827      	ldr	r0, [pc, #156]	; (8000cb4 <loadConfig+0x13c>)
 8000c18:	f004 fdfc 	bl	8005814 <memset>
	}

	LOG_INF(TAG, "Door key is %s", app.m_devInfo.m_doorKey);
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <loadConfig+0x13c>)
 8000c1e:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <loadConfig+0x140>)
 8000c20:	4926      	ldr	r1, [pc, #152]	; (8000cbc <loadConfig+0x144>)
 8000c22:	2002      	movs	r0, #2
 8000c24:	f001 fad8 	bl	80021d8 <sm_logger_show>

	for(int id = 0; id < LIGHT_NUMBER; id++){
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000c2e:	e013      	b.n	8000c58 <loadConfig+0xe0>
		controlLight(id, app.m_devInfo.m_light[id].m_stt);
 8000c30:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000c34:	b2d8      	uxtb	r0, r3
 8000c36:	491e      	ldr	r1, [pc, #120]	; (8000cb0 <loadConfig+0x138>)
 8000c38:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	330c      	adds	r3, #12
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f000 f885 	bl	8000d58 <controlLight>
	for(int id = 0; id < LIGHT_NUMBER; id++){
 8000c4e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000c52:	3301      	adds	r3, #1
 8000c54:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000c58:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	dde7      	ble.n	8000c30 <loadConfig+0xb8>
	}

	app.m_devInfo.m_humi = 61;
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <loadConfig+0x138>)
 8000c62:	223d      	movs	r2, #61	; 0x3d
 8000c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	app.m_devInfo.m_temp = 22;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <loadConfig+0x138>)
 8000c6a:	2216      	movs	r2, #22
 8000c6c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	HAL_GPIO_WritePin(OUT_DOOR_GPIO_Port, OUT_DOOR_Pin, app.m_devInfo.m_doorStt);
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <loadConfig+0x138>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	461a      	mov	r2, r3
 8000c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7a:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <loadConfig+0x148>)
 8000c7c:	f002 f873 	bl	8002d66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_FAN_GPIO_Port, OUT_FAN_Pin, app.m_devInfo.m_bedFan);
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <loadConfig+0x138>)
 8000c82:	78db      	ldrb	r3, [r3, #3]
 8000c84:	461a      	mov	r2, r3
 8000c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <loadConfig+0x148>)
 8000c8c:	f002 f86b 	bl	8002d66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_BUZZER_GPIO_Port, OUT_BUZZER_Pin, app.m_devInfo.m_fireBuzzer);
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <loadConfig+0x138>)
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <loadConfig+0x148>)
 8000c9c:	f002 f863 	bl	8002d66 <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	0801fc00 	.word	0x0801fc00
 8000cb0:	20000384 	.word	0x20000384
 8000cb4:	200003cd 	.word	0x200003cd
 8000cb8:	08006314 	.word	0x08006314
 8000cbc:	080062f8 	.word	0x080062f8
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <setLightBrightness>:
bool getLightStt(uint8_t _light){
    return app.m_devInfo.m_light[_light].m_stt;
}


void setLightBrightness(uint8_t _light, uint8_t _brightness){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	 app.m_devInfo.m_light[_light].m_brightness = _brightness;
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	491e      	ldr	r1, [pc, #120]	; (8000d50 <setLightBrightness+0x8c>)
 8000cd8:	4613      	mov	r3, r2
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	330d      	adds	r3, #13
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	701a      	strb	r2, [r3, #0]

	 if(!app.m_devInfo.m_light[_light].m_stt){
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	4919      	ldr	r1, [pc, #100]	; (8000d50 <setLightBrightness+0x8c>)
 8000cea:	4613      	mov	r3, r2
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d022      	beq.n	8000d40 <setLightBrightness+0x7c>
		 return;
	 }
	    switch (_light) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d821      	bhi.n	8000d44 <setLightBrightness+0x80>
 8000d00:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <setLightBrightness+0x44>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d19 	.word	0x08000d19
 8000d0c:	08000d2d 	.word	0x08000d2d
 8000d10:	08000d23 	.word	0x08000d23
 8000d14:	08000d37 	.word	0x08000d37
			case BED_LIGHT:
				 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, _brightness);
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <setLightBrightness+0x90>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	79ba      	ldrb	r2, [r7, #6]
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000d20:	e011      	b.n	8000d46 <setLightBrightness+0x82>
			case KITCHEN_LIGHT:
				 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, _brightness);
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <setLightBrightness+0x90>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	79ba      	ldrb	r2, [r7, #6]
 8000d28:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000d2a:	e00c      	b.n	8000d46 <setLightBrightness+0x82>
			case LIVING_LIGHT:
				 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, _brightness);
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <setLightBrightness+0x90>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000d34:	e007      	b.n	8000d46 <setLightBrightness+0x82>
			case HALLWAY_LIGHT:
				 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, _brightness);
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <setLightBrightness+0x90>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000d3e:	e002      	b.n	8000d46 <setLightBrightness+0x82>
		 return;
 8000d40:	bf00      	nop
 8000d42:	e000      	b.n	8000d46 <setLightBrightness+0x82>
			default:
				break;
 8000d44:	bf00      	nop
		}

}
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000384 	.word	0x20000384
 8000d54:	200002fc 	.word	0x200002fc

08000d58 <controlLight>:

void controlLight(uint8_t _light, uint8_t _stt){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
    uint8_t value = _stt?app.m_devInfo.m_light[_light].m_brightness:0;
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <controlLight+0x28>
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	4927      	ldr	r1, [pc, #156]	; (8000e10 <controlLight+0xb8>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	330d      	adds	r3, #13
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	e000      	b.n	8000d82 <controlLight+0x2a>
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

    switch (_light) {
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d81e      	bhi.n	8000dc8 <controlLight+0x70>
 8000d8a:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <controlLight+0x38>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db5 	.word	0x08000db5
 8000d98:	08000dab 	.word	0x08000dab
 8000d9c:	08000dbf 	.word	0x08000dbf
		case BED_LIGHT:
			 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, value);
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <controlLight+0xbc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000da8:	e00f      	b.n	8000dca <controlLight+0x72>
		case KITCHEN_LIGHT:
			 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, value);
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <controlLight+0xbc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000db2:	e00a      	b.n	8000dca <controlLight+0x72>
		case LIVING_LIGHT:
			 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, value);
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <controlLight+0xbc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000dbc:	e005      	b.n	8000dca <controlLight+0x72>
		case HALLWAY_LIGHT:
			 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, value);
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <controlLight+0xbc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000dc6:	e000      	b.n	8000dca <controlLight+0x72>
		default:
			break;
 8000dc8:	bf00      	nop
	}

//    saveConfig();
    LOG_INF(TAG, "Now %s light %d at %dh - %dm", _stt?"ON":"OFF", _light, app.m_devInfo.m_devTime.m_hour, app.m_devInfo.m_devTime.m_min);
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <controlLight+0x7c>
 8000dd0:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <controlLight+0xc0>)
 8000dd2:	e000      	b.n	8000dd6 <controlLight+0x7e>
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <controlLight+0xc4>)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	490d      	ldr	r1, [pc, #52]	; (8000e10 <controlLight+0xb8>)
 8000dda:	7809      	ldrb	r1, [r1, #0]
 8000ddc:	4608      	mov	r0, r1
 8000dde:	490c      	ldr	r1, [pc, #48]	; (8000e10 <controlLight+0xb8>)
 8000de0:	7849      	ldrb	r1, [r1, #1]
 8000de2:	9102      	str	r1, [sp, #8]
 8000de4:	9001      	str	r0, [sp, #4]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4613      	mov	r3, r2
 8000dea:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <controlLight+0xc8>)
 8000dec:	490d      	ldr	r1, [pc, #52]	; (8000e24 <controlLight+0xcc>)
 8000dee:	2002      	movs	r0, #2
 8000df0:	f001 f9f2 	bl	80021d8 <sm_logger_show>
    app.m_devInfo.m_light[_light].m_stt = _stt;
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	4906      	ldr	r1, [pc, #24]	; (8000e10 <controlLight+0xb8>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	1a9b      	subs	r3, r3, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	330c      	adds	r3, #12
 8000e02:	79ba      	ldrb	r2, [r7, #6]
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000384 	.word	0x20000384
 8000e14:	200002fc 	.word	0x200002fc
 8000e18:	08006324 	.word	0x08006324
 8000e1c:	08006328 	.word	0x08006328
 8000e20:	0800632c 	.word	0x0800632c
 8000e24:	080062f8 	.word	0x080062f8

08000e28 <host_receive_cmd_callback>:


int32_t host_receive_cmd_callback(int32_t _cmd, const uint8_t* _data, int32_t _len, void* _arg ) {
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
    switch (_cmd) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b14      	cmp	r3, #20
 8000e3a:	f200 8291 	bhi.w	8001360 <host_receive_cmd_callback+0x538>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <host_receive_cmd_callback+0x1c>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e99 	.word	0x08000e99
 8000e48:	08000ecd 	.word	0x08000ecd
 8000e4c:	08000f05 	.word	0x08000f05
 8000e50:	08000f3b 	.word	0x08000f3b
 8000e54:	08000f57 	.word	0x08000f57
 8000e58:	08000f91 	.word	0x08000f91
 8000e5c:	08000fc7 	.word	0x08000fc7
 8000e60:	08000fe3 	.word	0x08000fe3
 8000e64:	0800101b 	.word	0x0800101b
 8000e68:	08001037 	.word	0x08001037
 8000e6c:	0800106f 	.word	0x0800106f
 8000e70:	0800108b 	.word	0x0800108b
 8000e74:	080010c7 	.word	0x080010c7
 8000e78:	0800118f 	.word	0x0800118f
 8000e7c:	0800121b 	.word	0x0800121b
 8000e80:	0800128f 	.word	0x0800128f
 8000e84:	08001361 	.word	0x08001361
 8000e88:	080012c3 	.word	0x080012c3
 8000e8c:	08001341 	.word	0x08001341
 8000e90:	08001361 	.word	0x08001361
 8000e94:	08001361 	.word	0x08001361
        case CMD_HOLDING_UPDATE_TIME:{
            uint8_t hour = _data[1];
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	75bb      	strb	r3, [r7, #22]
            uint8_t min  = _data[0];
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	757b      	strb	r3, [r7, #21]
//            LOG_INF(TAG, "Set local time to %2dh-%2dm", hour, min);
            app.m_minCount = 0;
 8000ea6:	4b8d      	ldr	r3, [pc, #564]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            app.m_devInfo.m_devTime.m_hour = hour;
 8000eae:	4a8b      	ldr	r2, [pc, #556]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000eb0:	7dbb      	ldrb	r3, [r7, #22]
 8000eb2:	7013      	strb	r3, [r2, #0]
            app.m_devInfo.m_devTime.m_min = min;
 8000eb4:	4a89      	ldr	r2, [pc, #548]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000eb6:	7d7b      	ldrb	r3, [r7, #21]
 8000eb8:	7053      	strb	r3, [r2, #1]
            sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t *) &app.m_devInfo, sizeof(dev_info_t));
 8000eba:	4b88      	ldr	r3, [pc, #544]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000ebc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000ebe:	2353      	movs	r3, #83	; 0x53
 8000ec0:	4a86      	ldr	r2, [pc, #536]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	f000 ff13 	bl	8001cee <sm_host_send_cmd>
            return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e256      	b.n	800137a <host_receive_cmd_callback+0x552>
            break;
        }
        case CMD_HOLDING_OPEN_DOOR:
            LOG_INF(TAG, "Now %s door lock", _data[0] ? "Open" : "Lock");
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <host_receive_cmd_callback+0xb0>
 8000ed4:	4b82      	ldr	r3, [pc, #520]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8000ed6:	e000      	b.n	8000eda <host_receive_cmd_callback+0xb2>
 8000ed8:	4b82      	ldr	r3, [pc, #520]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8000eda:	4a83      	ldr	r2, [pc, #524]	; (80010e8 <host_receive_cmd_callback+0x2c0>)
 8000edc:	4983      	ldr	r1, [pc, #524]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f001 f97a 	bl	80021d8 <sm_logger_show>
            HAL_GPIO_WritePin(OUT_DOOR_GPIO_Port, OUT_DOOR_Pin, _data[0]);
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	4880      	ldr	r0, [pc, #512]	; (80010f0 <host_receive_cmd_callback+0x2c8>)
 8000ef0:	f001 ff39 	bl	8002d66 <HAL_GPIO_WritePin>
            app.m_devInfo.m_doorStt = _data[0];
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b78      	ldr	r3, [pc, #480]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000efa:	709a      	strb	r2, [r3, #2]
            elapsed_timer_reset(&app.m_offLockTimer);
 8000efc:	487d      	ldr	r0, [pc, #500]	; (80010f4 <host_receive_cmd_callback+0x2cc>)
 8000efe:	f7ff fd52 	bl	80009a6 <elapsed_timer_reset>
            break;
 8000f02:	e232      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_CONTROL_LIGHT_BED:
            LOG_INF(TAG, "Now %s bed room light", _data[0] ? "Open" : "Lock");
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <host_receive_cmd_callback+0xe8>
 8000f0c:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8000f0e:	e000      	b.n	8000f12 <host_receive_cmd_callback+0xea>
 8000f10:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8000f12:	4a79      	ldr	r2, [pc, #484]	; (80010f8 <host_receive_cmd_callback+0x2d0>)
 8000f14:	4975      	ldr	r1, [pc, #468]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000f16:	2002      	movs	r0, #2
 8000f18:	f001 f95e 	bl	80021d8 <sm_logger_show>
            controlLight(BED_LIGHT, _data[0]);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff18 	bl	8000d58 <controlLight>
            app.m_force_light[BED_LIGHT] = true;
 8000f28:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            app.m_devInfo.m_light[BED_LIGHT].m_stt = _data[0];
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	4b69      	ldr	r3, [pc, #420]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000f36:	731a      	strb	r2, [r3, #12]
            break;
 8000f38:	e217      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_SET_BED_BRIGHTNESS:
            LOG_INF(TAG, "Now set bed light brightness to %d", _data[0]);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4a6f      	ldr	r2, [pc, #444]	; (80010fc <host_receive_cmd_callback+0x2d4>)
 8000f40:	496a      	ldr	r1, [pc, #424]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000f42:	2002      	movs	r0, #2
 8000f44:	f001 f948 	bl	80021d8 <sm_logger_show>
            setLightBrightness(BED_LIGHT, _data[0]);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff feb8 	bl	8000cc4 <setLightBrightness>
            break;
 8000f54:	e209      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_CONTROL_FAN_BED:
            LOG_INF(TAG, "Now %s bed room fan", _data[0] ? "Open" : "Lock");
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <host_receive_cmd_callback+0x13a>
 8000f5e:	4b60      	ldr	r3, [pc, #384]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8000f60:	e000      	b.n	8000f64 <host_receive_cmd_callback+0x13c>
 8000f62:	4b60      	ldr	r3, [pc, #384]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8000f64:	4a66      	ldr	r2, [pc, #408]	; (8001100 <host_receive_cmd_callback+0x2d8>)
 8000f66:	4961      	ldr	r1, [pc, #388]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f001 f935 	bl	80021d8 <sm_logger_show>
            HAL_GPIO_WritePin(OUT_FAN_GPIO_Port, OUT_FAN_Pin, _data[0]);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	485d      	ldr	r0, [pc, #372]	; (80010f0 <host_receive_cmd_callback+0x2c8>)
 8000f7a:	f001 fef4 	bl	8002d66 <HAL_GPIO_WritePin>
            app.m_devInfo.m_bedFan = _data[0];
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000f84:	70da      	strb	r2, [r3, #3]
            app.m_focre_fan = true;
 8000f86:	4b55      	ldr	r3, [pc, #340]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8000f8e:	e1ec      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_CONTROL_LIGHT_LIVING:
            LOG_INF(TAG, "Now %s living room light", _data[0] ? "Open" : "Lock");
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <host_receive_cmd_callback+0x174>
 8000f98:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8000f9a:	e000      	b.n	8000f9e <host_receive_cmd_callback+0x176>
 8000f9c:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8000f9e:	4a59      	ldr	r2, [pc, #356]	; (8001104 <host_receive_cmd_callback+0x2dc>)
 8000fa0:	4952      	ldr	r1, [pc, #328]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f001 f918 	bl	80021d8 <sm_logger_show>
            controlLight(LIVING_LIGHT, _data[0]);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fed2 	bl	8000d58 <controlLight>
            app.m_force_light[LIVING_LIGHT] = true;
 8000fb4:	4b49      	ldr	r3, [pc, #292]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            app.m_devInfo.m_light[LIVING_LIGHT].m_stt = _data[0];
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8000fc2:	76da      	strb	r2, [r3, #27]
            break;
 8000fc4:	e1d1      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_SET_LIVING_BRIGHTNESS:
            LOG_INF(TAG, "Now set living light brightness to %d", _data[0]);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <host_receive_cmd_callback+0x2e0>)
 8000fcc:	4947      	ldr	r1, [pc, #284]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f001 f902 	bl	80021d8 <sm_logger_show>
            setLightBrightness(LIVING_LIGHT, _data[0]);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff fe72 	bl	8000cc4 <setLightBrightness>
            break;
 8000fe0:	e1c3      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_CONTROL_LIGHT_KITCHEN:
            LOG_INF(TAG, "Now %s kitchen light", _data[0] ? "Open" : "Lock");
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <host_receive_cmd_callback+0x1c6>
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8000fec:	e000      	b.n	8000ff0 <host_receive_cmd_callback+0x1c8>
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8000ff0:	4a46      	ldr	r2, [pc, #280]	; (800110c <host_receive_cmd_callback+0x2e4>)
 8000ff2:	493e      	ldr	r1, [pc, #248]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f001 f8ef 	bl	80021d8 <sm_logger_show>
            controlLight(KITCHEN_LIGHT, _data[0]);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fea9 	bl	8000d58 <controlLight>
            app.m_force_light[KITCHEN_LIGHT] = true;
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8001008:	2201      	movs	r2, #1
 800100a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            app.m_devInfo.m_light[KITCHEN_LIGHT].m_stt = _data[0];
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8001014:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            break;
 8001018:	e1a7      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_SET_KITCHEN_BRIGHTNESS:
            LOG_INF(TAG, "Now set kitchen light brightness to %d", _data[0]);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4a3c      	ldr	r2, [pc, #240]	; (8001110 <host_receive_cmd_callback+0x2e8>)
 8001020:	4932      	ldr	r1, [pc, #200]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8001022:	2002      	movs	r0, #2
 8001024:	f001 f8d8 	bl	80021d8 <sm_logger_show>
            setLightBrightness(KITCHEN_LIGHT, _data[0]);
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	2002      	movs	r0, #2
 8001030:	f7ff fe48 	bl	8000cc4 <setLightBrightness>
            break;
 8001034:	e199      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_CONTROL_LIGHT_HALLWAY:
            LOG_INF(TAG, "Now %s hallway light", _data[0] ? "Open" : "Lock");
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <host_receive_cmd_callback+0x21a>
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8001040:	e000      	b.n	8001044 <host_receive_cmd_callback+0x21c>
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8001044:	4a33      	ldr	r2, [pc, #204]	; (8001114 <host_receive_cmd_callback+0x2ec>)
 8001046:	4929      	ldr	r1, [pc, #164]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8001048:	2002      	movs	r0, #2
 800104a:	f001 f8c5 	bl	80021d8 <sm_logger_show>
            controlLight(HALLWAY_LIGHT, _data[0]);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fe7f 	bl	8000d58 <controlLight>
            app.m_force_light[HALLWAY_LIGHT] = true;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 800105c:	2201      	movs	r2, #1
 800105e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            app.m_devInfo.m_light[HALLWAY_LIGHT].m_stt = _data[0];
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 8001068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            break;
 800106c:	e17d      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_SET_HALLWAY_BRIGHTNESS:
            LOG_INF(TAG, "Now set hallway light brightness to %d", _data[0]);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4a29      	ldr	r2, [pc, #164]	; (8001118 <host_receive_cmd_callback+0x2f0>)
 8001074:	491d      	ldr	r1, [pc, #116]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 8001076:	2002      	movs	r0, #2
 8001078:	f001 f8ae 	bl	80021d8 <sm_logger_show>
            setLightBrightness(HALLWAY_LIGHT, _data[0]);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	2003      	movs	r0, #3
 8001084:	f7ff fe1e 	bl	8000cc4 <setLightBrightness>
            break;
 8001088:	e16f      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_CONTROL_FIRE_BUZZER:
            LOG_INF(TAG, "Now %s fire buzzer", _data[0] ? "Open" : "Lock");
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <host_receive_cmd_callback+0x26e>
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <host_receive_cmd_callback+0x2b8>)
 8001094:	e000      	b.n	8001098 <host_receive_cmd_callback+0x270>
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <host_receive_cmd_callback+0x2bc>)
 8001098:	4a20      	ldr	r2, [pc, #128]	; (800111c <host_receive_cmd_callback+0x2f4>)
 800109a:	4914      	ldr	r1, [pc, #80]	; (80010ec <host_receive_cmd_callback+0x2c4>)
 800109c:	2002      	movs	r0, #2
 800109e:	f001 f89b 	bl	80021d8 <sm_logger_show>
            HAL_GPIO_WritePin(OUT_BUZZER_GPIO_Port, OUT_BUZZER_Pin, _data[0]);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <host_receive_cmd_callback+0x2c8>)
 80010ae:	f001 fe5a 	bl	8002d66 <HAL_GPIO_WritePin>
            app.m_devInfo.m_fireBuzzer = _data[0];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <host_receive_cmd_callback+0x2b4>)
 80010b8:	715a      	strb	r2, [r3, #5]
            elapsed_timer_resetz(&app.m_fireWarningTimer, FIRE_TIMEOUT);
 80010ba:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010be:	4818      	ldr	r0, [pc, #96]	; (8001120 <host_receive_cmd_callback+0x2f8>)
 80010c0:	f7ff fc7f 	bl	80009c2 <elapsed_timer_resetz>
            break;
 80010c4:	e151      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_SET_AUTO_LIGHT:{
            LOG_INF(TAG, "Set auto light %d to %s", _data[0], _data[1] ? "ON" : "OFF");
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d028      	beq.n	8001128 <host_receive_cmd_callback+0x300>
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <host_receive_cmd_callback+0x2fc>)
 80010d8:	e027      	b.n	800112a <host_receive_cmd_callback+0x302>
 80010da:	bf00      	nop
 80010dc:	20000384 	.word	0x20000384
 80010e0:	0800634c 	.word	0x0800634c
 80010e4:	08006354 	.word	0x08006354
 80010e8:	0800635c 	.word	0x0800635c
 80010ec:	080062f8 	.word	0x080062f8
 80010f0:	40020000 	.word	0x40020000
 80010f4:	200003e8 	.word	0x200003e8
 80010f8:	08006370 	.word	0x08006370
 80010fc:	08006388 	.word	0x08006388
 8001100:	080063ac 	.word	0x080063ac
 8001104:	080063c0 	.word	0x080063c0
 8001108:	080063dc 	.word	0x080063dc
 800110c:	08006404 	.word	0x08006404
 8001110:	0800641c 	.word	0x0800641c
 8001114:	08006444 	.word	0x08006444
 8001118:	0800645c 	.word	0x0800645c
 800111c:	08006484 	.word	0x08006484
 8001120:	200003f8 	.word	0x200003f8
 8001124:	08006324 	.word	0x08006324
 8001128:	4b96      	ldr	r3, [pc, #600]	; (8001384 <host_receive_cmd_callback+0x55c>)
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	4a96      	ldr	r2, [pc, #600]	; (8001388 <host_receive_cmd_callback+0x560>)
 8001130:	4996      	ldr	r1, [pc, #600]	; (800138c <host_receive_cmd_callback+0x564>)
 8001132:	2002      	movs	r0, #2
 8001134:	f001 f850 	bl	80021d8 <sm_logger_show>

            uint8_t light = _data[0];
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	75fb      	strb	r3, [r7, #23]
            app.m_devInfo.m_light[light].m_auto = _data[1];
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3301      	adds	r3, #1
 8001142:	7dfa      	ldrb	r2, [r7, #23]
 8001144:	7818      	ldrb	r0, [r3, #0]
 8001146:	4992      	ldr	r1, [pc, #584]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001148:	4613      	mov	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	440b      	add	r3, r1
 8001150:	330e      	adds	r3, #14
 8001152:	4602      	mov	r2, r0
 8001154:	701a      	strb	r2, [r3, #0]
            if(!app.m_devInfo.m_light[light].m_auto){
 8001156:	7dfa      	ldrb	r2, [r7, #23]
 8001158:	498d      	ldr	r1, [pc, #564]	; (8001390 <host_receive_cmd_callback+0x568>)
 800115a:	4613      	mov	r3, r2
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	440b      	add	r3, r1
 8001162:	330e      	adds	r3, #14
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80fc 	bne.w	8001364 <host_receive_cmd_callback+0x53c>
            	if(app.m_devInfo.m_light[light].m_stt){
 800116c:	7dfa      	ldrb	r2, [r7, #23]
 800116e:	4988      	ldr	r1, [pc, #544]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001170:	4613      	mov	r3, r2
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	440b      	add	r3, r1
 8001178:	330c      	adds	r3, #12
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80f1 	beq.w	8001364 <host_receive_cmd_callback+0x53c>
            		controlLight(light, false);
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fde6 	bl	8000d58 <controlLight>
            	}
            }
            break;
 800118c:	e0ea      	b.n	8001364 <host_receive_cmd_callback+0x53c>
        }
        case CMD_HOLDING_SET_AUTO_TIME:{
            uint8_t light = _data[0];
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	767b      	strb	r3, [r7, #25]
            uint8_t cfId = _data[1];
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3301      	adds	r3, #1
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	763b      	strb	r3, [r7, #24]
            app.m_devInfo.m_light[light].m_autoConfigStart[cfId].m_hour = _data[2];
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c99      	adds	r1, r3, #2
 80011a0:	7e7a      	ldrb	r2, [r7, #25]
 80011a2:	7e3b      	ldrb	r3, [r7, #24]
 80011a4:	780c      	ldrb	r4, [r1, #0]
 80011a6:	487a      	ldr	r0, [pc, #488]	; (8001390 <host_receive_cmd_callback+0x568>)
 80011a8:	0059      	lsls	r1, r3, #1
 80011aa:	4613      	mov	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	4403      	add	r3, r0
 80011b4:	330f      	adds	r3, #15
 80011b6:	4622      	mov	r2, r4
 80011b8:	701a      	strb	r2, [r3, #0]
            app.m_devInfo.m_light[light].m_autoConfigStart[cfId].m_min = _data[3];
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1cd9      	adds	r1, r3, #3
 80011be:	7e7a      	ldrb	r2, [r7, #25]
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	780c      	ldrb	r4, [r1, #0]
 80011c4:	4872      	ldr	r0, [pc, #456]	; (8001390 <host_receive_cmd_callback+0x568>)
 80011c6:	0059      	lsls	r1, r3, #1
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	4403      	add	r3, r0
 80011d2:	3310      	adds	r3, #16
 80011d4:	4622      	mov	r2, r4
 80011d6:	701a      	strb	r2, [r3, #0]
            app.m_devInfo.m_light[light].m_autoConfigStop[cfId].m_hour = _data[4];
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1d19      	adds	r1, r3, #4
 80011dc:	7e7a      	ldrb	r2, [r7, #25]
 80011de:	7e3b      	ldrb	r3, [r7, #24]
 80011e0:	780c      	ldrb	r4, [r1, #0]
 80011e2:	486b      	ldr	r0, [pc, #428]	; (8001390 <host_receive_cmd_callback+0x568>)
 80011e4:	3304      	adds	r3, #4
 80011e6:	0059      	lsls	r1, r3, #1
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	4403      	add	r3, r0
 80011f2:	330d      	adds	r3, #13
 80011f4:	4622      	mov	r2, r4
 80011f6:	701a      	strb	r2, [r3, #0]
            app.m_devInfo.m_light[light].m_autoConfigStop[cfId].m_min = _data[5];
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1d59      	adds	r1, r3, #5
 80011fc:	7e7a      	ldrb	r2, [r7, #25]
 80011fe:	7e3b      	ldrb	r3, [r7, #24]
 8001200:	780c      	ldrb	r4, [r1, #0]
 8001202:	4863      	ldr	r0, [pc, #396]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001204:	3304      	adds	r3, #4
 8001206:	0059      	lsls	r1, r3, #1
 8001208:	4613      	mov	r3, r2
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	440b      	add	r3, r1
 8001210:	4403      	add	r3, r0
 8001212:	330e      	adds	r3, #14
 8001214:	4622      	mov	r2, r4
 8001216:	701a      	strb	r2, [r3, #0]
            break;
 8001218:	e0a7      	b.n	800136a <host_receive_cmd_callback+0x542>
        }
        case CMD_HOLDING_DELETE_AUTO_TIME:{
            uint8_t light = _data[0];
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	76fb      	strb	r3, [r7, #27]
            uint8_t cfId = _data[1];
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3301      	adds	r3, #1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	76bb      	strb	r3, [r7, #26]
            app.m_devInfo.m_light[light].m_autoConfigStart[cfId].m_hour = 0;
 8001228:	7efa      	ldrb	r2, [r7, #27]
 800122a:	7ebb      	ldrb	r3, [r7, #26]
 800122c:	4858      	ldr	r0, [pc, #352]	; (8001390 <host_receive_cmd_callback+0x568>)
 800122e:	0059      	lsls	r1, r3, #1
 8001230:	4613      	mov	r3, r2
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	440b      	add	r3, r1
 8001238:	4403      	add	r3, r0
 800123a:	330f      	adds	r3, #15
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
            app.m_devInfo.m_light[light].m_autoConfigStart[cfId].m_min = 0;
 8001240:	7efa      	ldrb	r2, [r7, #27]
 8001242:	7ebb      	ldrb	r3, [r7, #26]
 8001244:	4852      	ldr	r0, [pc, #328]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001246:	0059      	lsls	r1, r3, #1
 8001248:	4613      	mov	r3, r2
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	440b      	add	r3, r1
 8001250:	4403      	add	r3, r0
 8001252:	3310      	adds	r3, #16
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
            app.m_devInfo.m_light[light].m_autoConfigStop[cfId].m_hour = 0;
 8001258:	7efa      	ldrb	r2, [r7, #27]
 800125a:	7ebb      	ldrb	r3, [r7, #26]
 800125c:	484c      	ldr	r0, [pc, #304]	; (8001390 <host_receive_cmd_callback+0x568>)
 800125e:	3304      	adds	r3, #4
 8001260:	0059      	lsls	r1, r3, #1
 8001262:	4613      	mov	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	440b      	add	r3, r1
 800126a:	4403      	add	r3, r0
 800126c:	330d      	adds	r3, #13
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
            app.m_devInfo.m_light[light].m_autoConfigStop[cfId].m_min = 0;
 8001272:	7efa      	ldrb	r2, [r7, #27]
 8001274:	7ebb      	ldrb	r3, [r7, #26]
 8001276:	4846      	ldr	r0, [pc, #280]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001278:	3304      	adds	r3, #4
 800127a:	0059      	lsls	r1, r3, #1
 800127c:	4613      	mov	r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	440b      	add	r3, r1
 8001284:	4403      	add	r3, r0
 8001286:	330e      	adds	r3, #14
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
            break;
 800128c:	e06d      	b.n	800136a <host_receive_cmd_callback+0x542>
        }
        case CMD_HOLDING_HALLWAY_HUMAN_DETECT:
            LOG_INF(TAG, "Now %s hallway human detect", _data[0] ? "Enable" : "Disable");
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <host_receive_cmd_callback+0x472>
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <host_receive_cmd_callback+0x56c>)
 8001298:	e000      	b.n	800129c <host_receive_cmd_callback+0x474>
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <host_receive_cmd_callback+0x570>)
 800129c:	4a3f      	ldr	r2, [pc, #252]	; (800139c <host_receive_cmd_callback+0x574>)
 800129e:	493b      	ldr	r1, [pc, #236]	; (800138c <host_receive_cmd_callback+0x564>)
 80012a0:	2002      	movs	r0, #2
 80012a2:	f000 ff99 	bl	80021d8 <sm_logger_show>
            app.m_devInfo.m_hallwayDetectHuman = _data[0];
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <host_receive_cmd_callback+0x568>)
 80012ac:	719a      	strb	r2, [r3, #6]
            if(app.m_devInfo.m_light[HALLWAY_LIGHT].m_stt){
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <host_receive_cmd_callback+0x568>)
 80012b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d057      	beq.n	8001368 <host_receive_cmd_callback+0x540>
            	controlLight(HALLWAY_LIGHT, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2003      	movs	r0, #3
 80012bc:	f7ff fd4c 	bl	8000d58 <controlLight>
            }
            break;
 80012c0:	e052      	b.n	8001368 <host_receive_cmd_callback+0x540>
        case CMD_HOLDING_SET_AUTO_FAN:
            app.m_devInfo.m_autoFan = _data[0];
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <host_receive_cmd_callback+0x568>)
 80012c8:	71da      	strb	r2, [r3, #7]
            if(app.m_devInfo.m_autoFan){
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <host_receive_cmd_callback+0x568>)
 80012cc:	79db      	ldrb	r3, [r3, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01c      	beq.n	800130c <host_receive_cmd_callback+0x4e4>
                uint8_t hourStart = _data[1];
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3301      	adds	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	77fb      	strb	r3, [r7, #31]
                uint8_t minStart = _data[2];
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3302      	adds	r3, #2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	77bb      	strb	r3, [r7, #30]
                uint8_t hourStop = _data[3];
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3303      	adds	r3, #3
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	777b      	strb	r3, [r7, #29]
                uint8_t minStop = _data[4];
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3304      	adds	r3, #4
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	773b      	strb	r3, [r7, #28]
                app.m_devInfo.m_autoFanStart.m_hour = hourStart;
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <host_receive_cmd_callback+0x568>)
 80012f4:	7ffb      	ldrb	r3, [r7, #31]
 80012f6:	7213      	strb	r3, [r2, #8]
                app.m_devInfo.m_autoFanStart.m_min = minStart;
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <host_receive_cmd_callback+0x568>)
 80012fa:	7fbb      	ldrb	r3, [r7, #30]
 80012fc:	7253      	strb	r3, [r2, #9]
                app.m_devInfo.m_autoFanStop.m_hour = hourStop;
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001300:	7f7b      	ldrb	r3, [r7, #29]
 8001302:	7293      	strb	r3, [r2, #10]
                app.m_devInfo.m_autoFanStop.m_min = minStop;
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001306:	7f3b      	ldrb	r3, [r7, #28]
 8001308:	72d3      	strb	r3, [r2, #11]
                app.m_devInfo.m_autoFanStop.m_hour = 0;
                app.m_devInfo.m_autoFanStop.m_min = 0;
            }


        	break;
 800130a:	e02e      	b.n	800136a <host_receive_cmd_callback+0x542>
            	if(app.m_devInfo.m_bedFan){
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <host_receive_cmd_callback+0x568>)
 800130e:	78db      	ldrb	r3, [r3, #3]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <host_receive_cmd_callback+0x4fe>
            		app.m_devInfo.m_bedFan = false;
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001316:	2200      	movs	r2, #0
 8001318:	70da      	strb	r2, [r3, #3]
            		HAL_GPIO_WritePin(OUT_FAN_GPIO_Port, OUT_FAN_Pin, false);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <host_receive_cmd_callback+0x578>)
 8001322:	f001 fd20 	bl	8002d66 <HAL_GPIO_WritePin>
                app.m_devInfo.m_autoFanStart.m_hour = 0;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001328:	2200      	movs	r2, #0
 800132a:	721a      	strb	r2, [r3, #8]
                app.m_devInfo.m_autoFanStart.m_min = 0;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <host_receive_cmd_callback+0x568>)
 800132e:	2200      	movs	r2, #0
 8001330:	725a      	strb	r2, [r3, #9]
                app.m_devInfo.m_autoFanStop.m_hour = 0;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001334:	2200      	movs	r2, #0
 8001336:	729a      	strb	r2, [r3, #10]
                app.m_devInfo.m_autoFanStop.m_min = 0;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <host_receive_cmd_callback+0x568>)
 800133a:	2200      	movs	r2, #0
 800133c:	72da      	strb	r2, [r3, #11]
        	break;
 800133e:	e014      	b.n	800136a <host_receive_cmd_callback+0x542>
        case CMD_HOLDING_BLINK_LED_TEST:
//            LOG_INF(TAG, "Blink led test...");
            break;
        case CMD_HOLDING_SET_DOOR_KEY:

        	memcpy(app.m_devInfo.m_doorKey, _data, 8);
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	3349      	adds	r3, #73	; 0x49
 8001346:	6811      	ldr	r1, [r2, #0]
 8001348:	6852      	ldr	r2, [r2, #4]
 800134a:	6019      	str	r1, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
        	LOG_INF(TAG, "Change pass to %s", _data);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <host_receive_cmd_callback+0x57c>)
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <host_receive_cmd_callback+0x564>)
 8001354:	2002      	movs	r0, #2
 8001356:	f000 ff3f 	bl	80021d8 <sm_logger_show>
            saveConfig();
 800135a:	f7ff fb8d 	bl	8000a78 <saveConfig>
        	break;
 800135e:	e004      	b.n	800136a <host_receive_cmd_callback+0x542>
        default:
            break;
 8001360:	bf00      	nop
 8001362:	e002      	b.n	800136a <host_receive_cmd_callback+0x542>
            break;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <host_receive_cmd_callback+0x542>
            break;
 8001368:	bf00      	nop
    }
    sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t *) &app.m_devInfo, sizeof(dev_info_t));
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <host_receive_cmd_callback+0x568>)
 800136c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800136e:	2353      	movs	r3, #83	; 0x53
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <host_receive_cmd_callback+0x568>)
 8001372:	2110      	movs	r1, #16
 8001374:	f000 fcbb 	bl	8001cee <sm_host_send_cmd>
    return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	08006328 	.word	0x08006328
 8001388:	08006498 	.word	0x08006498
 800138c:	080062f8 	.word	0x080062f8
 8001390:	20000384 	.word	0x20000384
 8001394:	080064b0 	.word	0x080064b0
 8001398:	080064b8 	.word	0x080064b8
 800139c:	080064c0 	.word	0x080064c0
 80013a0:	40020000 	.word	0x40020000
 80013a4:	080064dc 	.word	0x080064dc

080013a8 <processAutoLight>:

void processAutoLight(){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
    for(int id = 0; id < LIGHT_NUMBER; id++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e08e      	b.n	80014d2 <processAutoLight+0x12a>
    	if(id == HALLWAY_LIGHT && app.m_devInfo.m_hallwayDetectHuman)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d104      	bne.n	80013c4 <processAutoLight+0x1c>
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <processAutoLight+0x13c>)
 80013bc:	799b      	ldrb	r3, [r3, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 8083 	bne.w	80014ca <processAutoLight+0x122>
    		continue;

        if(app.m_devInfo.m_light[id].m_auto){
 80013c4:	4947      	ldr	r1, [pc, #284]	; (80014e4 <processAutoLight+0x13c>)
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4613      	mov	r3, r2
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	330e      	adds	r3, #14
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d079      	beq.n	80014cc <processAutoLight+0x124>
        	int inTime = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
            for(int i = 0; i < 3; i++){
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	e04e      	b.n	8001480 <processAutoLight+0xd8>
                if(isInTime(app.m_devInfo.m_devTime, app.m_devInfo.m_light[id].m_autoConfigStart[i], app.m_devInfo.m_light[id].m_autoConfigStop[i])){
 80013e2:	4840      	ldr	r0, [pc, #256]	; (80014e4 <processAutoLight+0x13c>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3304      	adds	r3, #4
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	0059      	lsls	r1, r3, #1
 80013ec:	4613      	mov	r3, r2
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	4403      	add	r3, r0
 80013f6:	f103 0208 	add.w	r2, r3, #8
 80013fa:	4c3a      	ldr	r4, [pc, #232]	; (80014e4 <processAutoLight+0x13c>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	0058      	lsls	r0, r3, #1
 8001402:	460b      	mov	r3, r1
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4403      	add	r3, r0
 800140a:	4423      	add	r3, r4
 800140c:	3308      	adds	r3, #8
 800140e:	4835      	ldr	r0, [pc, #212]	; (80014e4 <processAutoLight+0x13c>)
 8001410:	7951      	ldrb	r1, [r2, #5]
 8001412:	7992      	ldrb	r2, [r2, #6]
 8001414:	0212      	lsls	r2, r2, #8
 8001416:	4311      	orrs	r1, r2
 8001418:	2200      	movs	r2, #0
 800141a:	f361 020f 	bfi	r2, r1, #0, #16
 800141e:	79d9      	ldrb	r1, [r3, #7]
 8001420:	7a1b      	ldrb	r3, [r3, #8]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4319      	orrs	r1, r3
 8001426:	2300      	movs	r3, #0
 8001428:	f361 030f 	bfi	r3, r1, #0, #16
 800142c:	4619      	mov	r1, r3
 800142e:	6800      	ldr	r0, [r0, #0]
 8001430:	f7ff f88c 	bl	800054c <isInTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01f      	beq.n	800147a <processAutoLight+0xd2>
                  if(!app.m_devInfo.m_light[id].m_stt){
 800143a:	492a      	ldr	r1, [pc, #168]	; (80014e4 <processAutoLight+0x13c>)
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d112      	bne.n	8001474 <processAutoLight+0xcc>
                  	controlLight(id, true);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc7f 	bl	8000d58 <controlLight>
                    app.m_force_light[id] = false;
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <processAutoLight+0x13c>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	337c      	adds	r3, #124	; 0x7c
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
            		sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t *) &app.m_devInfo, sizeof(dev_info_t));
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <processAutoLight+0x13c>)
 8001468:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800146a:	2353      	movs	r3, #83	; 0x53
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <processAutoLight+0x13c>)
 800146e:	2110      	movs	r1, #16
 8001470:	f000 fc3d 	bl	8001cee <sm_host_send_cmd>
                  }
                  inTime = true;
 8001474:	2301      	movs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
                  break;
 8001478:	e005      	b.n	8001486 <processAutoLight+0xde>
            for(int i = 0; i < 3; i++){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3301      	adds	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	ddad      	ble.n	80013e2 <processAutoLight+0x3a>
                }
            }
            if(app.m_devInfo.m_light[id].m_stt && !app.m_force_light[id] && !inTime){
 8001486:	4917      	ldr	r1, [pc, #92]	; (80014e4 <processAutoLight+0x13c>)
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4613      	mov	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	440b      	add	r3, r1
 8001492:	330c      	adds	r3, #12
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d018      	beq.n	80014cc <processAutoLight+0x124>
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <processAutoLight+0x13c>)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	337c      	adds	r3, #124	; 0x7c
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <processAutoLight+0x124>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10e      	bne.n	80014cc <processAutoLight+0x124>
            	controlLight(id, false);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fc4f 	bl	8000d58 <controlLight>
        		sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t *) &app.m_devInfo, sizeof(dev_info_t));
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <processAutoLight+0x13c>)
 80014bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80014be:	2353      	movs	r3, #83	; 0x53
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <processAutoLight+0x13c>)
 80014c2:	2110      	movs	r1, #16
 80014c4:	f000 fc13 	bl	8001cee <sm_host_send_cmd>
 80014c8:	e000      	b.n	80014cc <processAutoLight+0x124>
    		continue;
 80014ca:	bf00      	nop
    for(int id = 0; id < LIGHT_NUMBER; id++){
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	f77f af6d 	ble.w	80013b4 <processAutoLight+0xc>
            }
        }
    }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	20000384 	.word	0x20000384

080014e8 <processAutoFan>:

void processAutoFan(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    if(app.m_devInfo.m_autoFan){
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <processAutoFan+0x94>)
 80014ee:	79db      	ldrb	r3, [r3, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d042      	beq.n	800157a <processAutoFan+0x92>
        if(isInTime(app.m_devInfo.m_devTime, app.m_devInfo.m_autoFanStart, app.m_devInfo.m_autoFanStop)){
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <processAutoFan+0x94>)
 80014f6:	4921      	ldr	r1, [pc, #132]	; (800157c <processAutoFan+0x94>)
 80014f8:	4820      	ldr	r0, [pc, #128]	; (800157c <processAutoFan+0x94>)
 80014fa:	895a      	ldrh	r2, [r3, #10]
 80014fc:	2300      	movs	r3, #0
 80014fe:	f362 030f 	bfi	r3, r2, #0, #16
 8001502:	461a      	mov	r2, r3
 8001504:	6889      	ldr	r1, [r1, #8]
 8001506:	6800      	ldr	r0, [r0, #0]
 8001508:	f7ff f820 	bl	800054c <isInTime>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d018      	beq.n	8001544 <processAutoFan+0x5c>
            if(!app.m_devInfo.m_bedFan){
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <processAutoFan+0x94>)
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d12e      	bne.n	8001578 <processAutoFan+0x90>
                HAL_GPIO_WritePin(OUT_FAN_GPIO_Port, OUT_FAN_Pin, true);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <processAutoFan+0x98>)
 8001522:	f001 fc20 	bl	8002d66 <HAL_GPIO_WritePin>
            	app.m_devInfo.m_bedFan = true;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <processAutoFan+0x94>)
 8001528:	2201      	movs	r2, #1
 800152a:	70da      	strb	r2, [r3, #3]
            	app.m_focre_fan = false;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <processAutoFan+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t *) &app.m_devInfo, sizeof(dev_info_t));
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <processAutoFan+0x94>)
 8001536:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001538:	2353      	movs	r3, #83	; 0x53
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <processAutoFan+0x94>)
 800153c:	2110      	movs	r1, #16
 800153e:	f000 fbd6 	bl	8001cee <sm_host_send_cmd>
            }
            return;
 8001542:	e019      	b.n	8001578 <processAutoFan+0x90>
        }else{
            if(app.m_devInfo.m_bedFan && !app.m_focre_fan){
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <processAutoFan+0x94>)
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d016      	beq.n	800157a <processAutoFan+0x92>
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <processAutoFan+0x94>)
 800154e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001552:	2b00      	cmp	r3, #0
 8001554:	d111      	bne.n	800157a <processAutoFan+0x92>
                HAL_GPIO_WritePin(OUT_FAN_GPIO_Port, OUT_FAN_Pin, false);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <processAutoFan+0x98>)
 800155e:	f001 fc02 	bl	8002d66 <HAL_GPIO_WritePin>
                app.m_devInfo.m_bedFan = false;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <processAutoFan+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	70da      	strb	r2, [r3, #3]
                sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t *) &app.m_devInfo, sizeof(dev_info_t));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <processAutoFan+0x94>)
 800156a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800156c:	2353      	movs	r3, #83	; 0x53
 800156e:	4a03      	ldr	r2, [pc, #12]	; (800157c <processAutoFan+0x94>)
 8001570:	2110      	movs	r1, #16
 8001572:	f000 fbbc 	bl	8001cee <sm_host_send_cmd>
 8001576:	e000      	b.n	800157a <processAutoFan+0x92>
            return;
 8001578:	bf00      	nop
            }
        }
    }
}
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000384 	.word	0x20000384
 8001580:	40020000 	.word	0x40020000

08001584 <main>:


int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af02      	add	r7, sp, #8
	board_init();
 800158a:	f7ff f844 	bl	8000616 <board_init>
	sm_logger_init(log_put, LOG_LEVEL_DEBUG);
 800158e:	2103      	movs	r1, #3
 8001590:	486c      	ldr	r0, [pc, #432]	; (8001744 <main+0x1c0>)
 8001592:	f000 fe0d 	bl	80021b0 <sm_logger_init>

	HAL_UART_Receive_IT(&huart2, &app.m_rxBuffer, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	496b      	ldr	r1, [pc, #428]	; (8001748 <main+0x1c4>)
 800159a:	486c      	ldr	r0, [pc, #432]	; (800174c <main+0x1c8>)
 800159c:	f003 f817 	bl	80045ce <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015a0:	2100      	movs	r1, #0
 80015a2:	486b      	ldr	r0, [pc, #428]	; (8001750 <main+0x1cc>)
 80015a4:	f002 fab0 	bl	8003b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015a8:	2104      	movs	r1, #4
 80015aa:	4869      	ldr	r0, [pc, #420]	; (8001750 <main+0x1cc>)
 80015ac:	f002 faac 	bl	8003b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015b0:	2108      	movs	r1, #8
 80015b2:	4867      	ldr	r0, [pc, #412]	; (8001750 <main+0x1cc>)
 80015b4:	f002 faa8 	bl	8003b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015b8:	210c      	movs	r1, #12
 80015ba:	4865      	ldr	r0, [pc, #404]	; (8001750 <main+0x1cc>)
 80015bc:	f002 faa4 	bl	8003b08 <HAL_TIM_PWM_Start>

    app.m_host = sm_host_create_default(SM_HOST_ASYNC_MODE, 0x99, serialHostSendIfDefault, NULL, &app);
 80015c0:	4b64      	ldr	r3, [pc, #400]	; (8001754 <main+0x1d0>)
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2300      	movs	r3, #0
 80015c6:	4a64      	ldr	r2, [pc, #400]	; (8001758 <main+0x1d4>)
 80015c8:	2199      	movs	r1, #153	; 0x99
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 fb24 	bl	8001c18 <sm_host_create_default>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a60      	ldr	r2, [pc, #384]	; (8001754 <main+0x1d0>)
 80015d4:	6553      	str	r3, [r2, #84]	; 0x54
    sm_host_reg_handle(app.m_host, host_receive_cmd_callback, &app);
 80015d6:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <main+0x1d0>)
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	4a5e      	ldr	r2, [pc, #376]	; (8001754 <main+0x1d0>)
 80015dc:	495f      	ldr	r1, [pc, #380]	; (800175c <main+0x1d8>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fb68 	bl	8001cb4 <sm_host_reg_handle>
    elapsed_timer_resetz(&app.m_offLockTimer, 3000);
 80015e4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80015e8:	485d      	ldr	r0, [pc, #372]	; (8001760 <main+0x1dc>)
 80015ea:	f7ff f9ea 	bl	80009c2 <elapsed_timer_resetz>
    elapsed_timer_resetz(&app.m_updateEviTimer, 500);
 80015ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015f2:	485c      	ldr	r0, [pc, #368]	; (8001764 <main+0x1e0>)
 80015f4:	f7ff f9e5 	bl	80009c2 <elapsed_timer_resetz>
    loadConfig();
 80015f8:	f7ff fabe 	bl	8000b78 <loadConfig>

  while (1)
  {
	  while (1) {
	  		sm_host_process(app.m_host);
 80015fc:	4b55      	ldr	r3, [pc, #340]	; (8001754 <main+0x1d0>)
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fc62 	bl	8001eca <sm_host_process>
	  		if (!elapsed_timer_get_remain(&app.m_updateEviTimer)) {
 8001606:	4857      	ldr	r0, [pc, #348]	; (8001764 <main+0x1e0>)
 8001608:	f7ff f9ed 	bl	80009e6 <elapsed_timer_get_remain>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f4      	bne.n	80015fc <main+0x78>
	  			elapsed_timer_reset(&app.m_updateEviTimer);
 8001612:	4854      	ldr	r0, [pc, #336]	; (8001764 <main+0x1e0>)
 8001614:	f7ff f9c7 	bl	80009a6 <elapsed_timer_reset>

	  			if (app.m_devInfo.m_hallwayDetectHuman) {
 8001618:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <main+0x1d0>)
 800161a:	799b      	ldrb	r3, [r3, #6]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d024      	beq.n	800166a <main+0xe6>
	  				if (HAL_GPIO_ReadPin(IN_HUMAN_DECT_GPIO_Port, IN_HUMAN_DECT_Pin)
 8001620:	2101      	movs	r1, #1
 8001622:	4851      	ldr	r0, [pc, #324]	; (8001768 <main+0x1e4>)
 8001624:	f001 fb88 	bl	8002d38 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00e      	beq.n	800164c <main+0xc8>
	  						&& !elapsed_timer_get_remain(&app.m_hallwayLightTimer)) {
 800162e:	484f      	ldr	r0, [pc, #316]	; (800176c <main+0x1e8>)
 8001630:	f7ff f9d9 	bl	80009e6 <elapsed_timer_get_remain>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <main+0xc8>
	  					elapsed_timer_resetz(&app.m_hallwayLightTimer, 5000);
 800163a:	f241 3188 	movw	r1, #5000	; 0x1388
 800163e:	484b      	ldr	r0, [pc, #300]	; (800176c <main+0x1e8>)
 8001640:	f7ff f9bf 	bl	80009c2 <elapsed_timer_resetz>
	  					controlLight(HALLWAY_LIGHT, true);
 8001644:	2101      	movs	r1, #1
 8001646:	2003      	movs	r0, #3
 8001648:	f7ff fb86 	bl	8000d58 <controlLight>
	  				}
	  				if (!elapsed_timer_get_remain(&app.m_hallwayLightTimer) && app.m_devInfo.m_light[HALLWAY_LIGHT].m_stt) {
 800164c:	4847      	ldr	r0, [pc, #284]	; (800176c <main+0x1e8>)
 800164e:	f7ff f9ca 	bl	80009e6 <elapsed_timer_get_remain>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d108      	bne.n	800166a <main+0xe6>
 8001658:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <main+0x1d0>)
 800165a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <main+0xe6>
	  					controlLight(HALLWAY_LIGHT, false);
 8001662:	2100      	movs	r1, #0
 8001664:	2003      	movs	r0, #3
 8001666:	f7ff fb77 	bl	8000d58 <controlLight>
	  				}
	  			}
	  			if (app.m_devInfo.m_doorStt && !elapsed_timer_get_remain(&app.m_offLockTimer)) {
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <main+0x1d0>)
 800166c:	789b      	ldrb	r3, [r3, #2]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d017      	beq.n	80016a2 <main+0x11e>
 8001672:	483b      	ldr	r0, [pc, #236]	; (8001760 <main+0x1dc>)
 8001674:	f7ff f9b7 	bl	80009e6 <elapsed_timer_get_remain>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d111      	bne.n	80016a2 <main+0x11e>
	  				app.m_devInfo.m_doorStt = false;
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <main+0x1d0>)
 8001680:	2200      	movs	r2, #0
 8001682:	709a      	strb	r2, [r3, #2]
	  				HAL_GPIO_WritePin(OUT_DOOR_GPIO_Port, OUT_DOOR_Pin, app.m_devInfo.m_doorStt);
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <main+0x1d0>)
 8001686:	789b      	ldrb	r3, [r3, #2]
 8001688:	461a      	mov	r2, r3
 800168a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168e:	4838      	ldr	r0, [pc, #224]	; (8001770 <main+0x1ec>)
 8001690:	f001 fb69 	bl	8002d66 <HAL_GPIO_WritePin>
	  				sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t*) &app.m_devInfo, sizeof(dev_info_t));
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <main+0x1d0>)
 8001696:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001698:	2353      	movs	r3, #83	; 0x53
 800169a:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <main+0x1d0>)
 800169c:	2110      	movs	r1, #16
 800169e:	f000 fb26 	bl	8001cee <sm_host_send_cmd>
	  			}
	  			processAutoLight();
 80016a2:	f7ff fe81 	bl	80013a8 <processAutoLight>
	  			processAutoFan();
 80016a6:	f7ff ff1f 	bl	80014e8 <processAutoFan>


	  			if(!HAL_GPIO_ReadPin(IN_FIRE_SS_GPIO_Port, IN_FIRE_SS_Pin) && !elapsed_timer_get_remain(&app.m_fireWarningTimer)){
 80016aa:	2102      	movs	r1, #2
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <main+0x1e4>)
 80016ae:	f001 fb43 	bl	8002d38 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d123      	bne.n	8001700 <main+0x17c>
 80016b8:	482e      	ldr	r0, [pc, #184]	; (8001774 <main+0x1f0>)
 80016ba:	f7ff f994 	bl	80009e6 <elapsed_timer_get_remain>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11d      	bne.n	8001700 <main+0x17c>
	  				app.m_devInfo.m_fireBuzzer = app.m_devInfo.m_fireSensor = true;
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <main+0x1d0>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	711a      	strb	r2, [r3, #4]
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <main+0x1d0>)
 80016cc:	791a      	ldrb	r2, [r3, #4]
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <main+0x1d0>)
 80016d0:	715a      	strb	r2, [r3, #5]
	  	     		HAL_GPIO_WritePin(OUT_BUZZER_GPIO_Port, OUT_BUZZER_Pin, true);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <main+0x1ec>)
 80016da:	f001 fb44 	bl	8002d66 <HAL_GPIO_WritePin>
	  				sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t*) &app.m_devInfo, sizeof(dev_info_t));
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <main+0x1d0>)
 80016e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80016e2:	2353      	movs	r3, #83	; 0x53
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <main+0x1d0>)
 80016e6:	2110      	movs	r1, #16
 80016e8:	f000 fb01 	bl	8001cee <sm_host_send_cmd>
	  				LOG_INF(TAG, "Fire!!!");
 80016ec:	4a22      	ldr	r2, [pc, #136]	; (8001778 <main+0x1f4>)
 80016ee:	4923      	ldr	r1, [pc, #140]	; (800177c <main+0x1f8>)
 80016f0:	2002      	movs	r0, #2
 80016f2:	f000 fd71 	bl	80021d8 <sm_logger_show>
	  				elapsed_timer_resetz(&app.m_fireWarningTimer, FIRE_TIMEOUT);
 80016f6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80016fa:	481e      	ldr	r0, [pc, #120]	; (8001774 <main+0x1f0>)
 80016fc:	f7ff f961 	bl	80009c2 <elapsed_timer_resetz>
	  			}
	  			if(!elapsed_timer_get_remain(&app.m_fireWarningTimer) && app.m_devInfo.m_fireBuzzer){
 8001700:	481c      	ldr	r0, [pc, #112]	; (8001774 <main+0x1f0>)
 8001702:	f7ff f970 	bl	80009e6 <elapsed_timer_get_remain>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f af77 	bne.w	80015fc <main+0x78>
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <main+0x1d0>)
 8001710:	795b      	ldrb	r3, [r3, #5]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f43f af72 	beq.w	80015fc <main+0x78>
	  				app.m_devInfo.m_fireBuzzer = app.m_devInfo.m_fireSensor = false;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <main+0x1d0>)
 800171a:	2200      	movs	r2, #0
 800171c:	711a      	strb	r2, [r3, #4]
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <main+0x1d0>)
 8001720:	791a      	ldrb	r2, [r3, #4]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <main+0x1d0>)
 8001724:	715a      	strb	r2, [r3, #5]
	  	     		HAL_GPIO_WritePin(OUT_BUZZER_GPIO_Port, OUT_BUZZER_Pin, false);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <main+0x1ec>)
 800172e:	f001 fb1a 	bl	8002d66 <HAL_GPIO_WritePin>
	  				sm_host_send_cmd(app.m_host, CMD_HOLDING_DEV_SEND_SYNC_DATA, (const uint8_t*) &app.m_devInfo, sizeof(dev_info_t));
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <main+0x1d0>)
 8001734:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001736:	2353      	movs	r3, #83	; 0x53
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <main+0x1d0>)
 800173a:	2110      	movs	r1, #16
 800173c:	f000 fad7 	bl	8001cee <sm_host_send_cmd>
	  		sm_host_process(app.m_host);
 8001740:	e75c      	b.n	80015fc <main+0x78>
 8001742:	bf00      	nop
 8001744:	08000a1d 	.word	0x08000a1d
 8001748:	200003dc 	.word	0x200003dc
 800174c:	2000033c 	.word	0x2000033c
 8001750:	200002fc 	.word	0x200002fc
 8001754:	20000384 	.word	0x20000384
 8001758:	08000a4d 	.word	0x08000a4d
 800175c:	08000e29 	.word	0x08000e29
 8001760:	200003e8 	.word	0x200003e8
 8001764:	200003f0 	.word	0x200003f0
 8001768:	40020800 	.word	0x40020800
 800176c:	200003e0 	.word	0x200003e0
 8001770:	40020000 	.word	0x40020000
 8001774:	200003f8 	.word	0x200003f8
 8001778:	080064f0 	.word	0x080064f0
 800177c:	080062f8 	.word	0x080062f8

08001780 <USART2_IRQHandler>:
	  	}
  }
}

void USART2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <USART2_IRQHandler+0x28>)
 8001786:	f002 ff47 	bl	8004618 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart2, &app.m_rxBuffer, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <USART2_IRQHandler+0x2c>)
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <USART2_IRQHandler+0x28>)
 8001790:	f002 ff1d 	bl	80045ce <HAL_UART_Receive_IT>
	sm_host_asyn_feed(&app.m_rxBuffer, 1, app.m_host);
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <USART2_IRQHandler+0x30>)
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	461a      	mov	r2, r3
 800179a:	2101      	movs	r1, #1
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <USART2_IRQHandler+0x2c>)
 800179e:	f000 fc8e 	bl	80020be <sm_host_asyn_feed>
//	LOG_INF(TAG, "feed a byte %d", app.m_rxBuffer);
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000033c 	.word	0x2000033c
 80017ac:	200003dc 	.word	0x200003dc
 80017b0:	20000384 	.word	0x20000384

080017b4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	app.m_minCount++;
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <SysTick_Handler+0x98>)
 80017ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017be:	3301      	adds	r3, #1
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <SysTick_Handler+0x98>)
 80017c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	if(app.m_minCount >= 60000){
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <SysTick_Handler+0x98>)
 80017c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017cc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d936      	bls.n	8001842 <SysTick_Handler+0x8e>
		app.m_minCount = 0;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <SysTick_Handler+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		increaseTimeMin(&app.m_devInfo.m_devTime);
 80017dc:	481b      	ldr	r0, [pc, #108]	; (800184c <SysTick_Handler+0x98>)
 80017de:	f7fe fef3 	bl	80005c8 <increaseTimeMin>

		if(app.m_devInfo.m_temp == 22){
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <SysTick_Handler+0x98>)
 80017e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80017e8:	2b16      	cmp	r3, #22
 80017ea:	d104      	bne.n	80017f6 <SysTick_Handler+0x42>
			app.m_devInfo.m_temp = 21;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <SysTick_Handler+0x98>)
 80017ee:	2215      	movs	r2, #21
 80017f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80017f4:	e00d      	b.n	8001812 <SysTick_Handler+0x5e>
		}else if(app.m_devInfo.m_temp == 21){
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <SysTick_Handler+0x98>)
 80017f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80017fc:	2b15      	cmp	r3, #21
 80017fe:	d104      	bne.n	800180a <SysTick_Handler+0x56>
			app.m_devInfo.m_temp = 23;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <SysTick_Handler+0x98>)
 8001802:	2217      	movs	r2, #23
 8001804:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001808:	e003      	b.n	8001812 <SysTick_Handler+0x5e>
		}else{
			app.m_devInfo.m_temp = 22;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <SysTick_Handler+0x98>)
 800180c:	2216      	movs	r2, #22
 800180e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}

		if(app.m_devInfo.m_humi == 61){
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <SysTick_Handler+0x98>)
 8001814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001818:	2b3d      	cmp	r3, #61	; 0x3d
 800181a:	d104      	bne.n	8001826 <SysTick_Handler+0x72>
			app.m_devInfo.m_humi = 59;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <SysTick_Handler+0x98>)
 800181e:	223b      	movs	r2, #59	; 0x3b
 8001820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001824:	e00d      	b.n	8001842 <SysTick_Handler+0x8e>
		}else if(app.m_devInfo.m_humi == 59){
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <SysTick_Handler+0x98>)
 8001828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800182c:	2b3b      	cmp	r3, #59	; 0x3b
 800182e:	d104      	bne.n	800183a <SysTick_Handler+0x86>
			app.m_devInfo.m_humi = 62;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SysTick_Handler+0x98>)
 8001832:	223e      	movs	r2, #62	; 0x3e
 8001834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001838:	e003      	b.n	8001842 <SysTick_Handler+0x8e>
		}else{
			app.m_devInfo.m_humi = 61;
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Handler+0x98>)
 800183c:	223d      	movs	r2, #61	; 0x3d
 800183e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		}
	}

  HAL_IncTick();
 8001842:	f000 fdad 	bl	80023a0 <HAL_IncTick>

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000384 	.word	0x20000384

08001850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_MspInit+0x58>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <HAL_MspInit+0x58>)
 800185c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001860:	6253      	str	r3, [r2, #36]	; 0x24
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_MspInit+0x58>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_MspInit+0x58>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_MspInit+0x58>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_MspInit+0x58>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_MspInit+0x58>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_MspInit+0x58>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6253      	str	r3, [r2, #36]	; 0x24
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_MspInit+0x58>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_SPI_MspInit+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d128      	bne.n	8001920 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6253      	str	r3, [r2, #36]	; 0x24
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001910:	2305      	movs	r3, #5
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_SPI_MspInit+0x84>)
 800191c:	f001 f88c 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40003800 	.word	0x40003800
 800192c:	40023800 	.word	0x40023800
 8001930:	40020400 	.word	0x40020400

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x34>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10b      	bne.n	800195e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_TIM_Base_MspInit+0x38>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_TIM_Base_MspInit+0x38>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6253      	str	r3, [r2, #36]	; 0x24
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_TIM_Base_MspInit+0x38>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40000800 	.word	0x40000800
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_TIM_MspPostInit+0x64>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11c      	bne.n	80019cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_TIM_MspPostInit+0x68>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_TIM_MspPostInit+0x68>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_TIM_MspPostInit+0x68>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80019aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80019ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019bc:	2302      	movs	r3, #2
 80019be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 80019c8:	f001 f836 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40000800 	.word	0x40000800
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020400 	.word	0x40020400

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_UART_MspInit+0x8c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12f      	bne.n	8001a62 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	6253      	str	r3, [r2, #36]	; 0x24
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <HAL_UART_MspInit+0x94>)
 8001a4e:	f000 fff3 	bl	8002a38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2026      	movs	r0, #38	; 0x26
 8001a58:	f000 fd95 	bl	8002586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a5c:	2026      	movs	r0, #38	; 0x26
 8001a5e:	f000 fdae 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e00a      	b.n	8001ae2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001acc:	f3af 8000 	nop.w
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60ba      	str	r2, [r7, #8]
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf0      	blt.n	8001acc <_read+0x12>
  }

  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <_isatty>:

int _isatty(int file)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f003 fea4 	bl	80058d0 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20002800 	.word	0x20002800
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	2000040c 	.word	0x2000040c
 8001bbc:	200007a0 	.word	0x200007a0

08001bc0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bcc:	f7ff fff8 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be8:	4c09      	ldr	r4, [pc, #36]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f003 fe71 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7ff fcc3 	bl	8001584 <main>
  bx lr
 8001bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8001c08:	080065bc 	.word	0x080065bc
  ldr r2, =_sbss
 8001c0c:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8001c10:	2000079c 	.word	0x2000079c

08001c14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>
	...

08001c18 <sm_host_create_default>:
    host->m_cmd_arg = NULL;

    return host;
}

sm_host_t* sm_host_create_default(uint8_t _mode, uint8_t _addr, sm_host_send_if _host_send_if, sm_host_recv_if _host_recv_if, void* _if_arg){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	460b      	mov	r3, r1
 8001c28:	73bb      	strb	r3, [r7, #14]
    if(_addr > SM_HOST_MAX_ADDR){
 8001c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da03      	bge.n	8001c3a <sm_host_create_default+0x22>
        g_host_default.m_addr = SM_HOST_ADDR_DEFAULT;
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	705a      	strb	r2, [r3, #1]
 8001c38:	e002      	b.n	8001c40 <sm_host_create_default+0x28>
    } else {
        g_host_default.m_addr = _addr;
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	7053      	strb	r3, [r2, #1]
    }
    g_host_default.m_mode = _mode;
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	7013      	strb	r3, [r2, #0]

    g_host_default.m_host_send_if = _host_send_if;
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
    g_host_default.m_host_recv_if = _host_recv_if;
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    g_host_default.m_arg_if = _if_arg;
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    memset(g_host_default.m_buffer, 0, SM_HOST_MAX_BUFFER);
 8001c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c62:	2100      	movs	r1, #0
 8001c64:	4811      	ldr	r0, [pc, #68]	; (8001cac <sm_host_create_default+0x94>)
 8001c66:	f003 fdd5 	bl	8005814 <memset>
    memset(g_host_default.m_packet, 0, SM_HOST_MAX_BUFFER);
 8001c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6e:	2100      	movs	r1, #0
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <sm_host_create_default+0x98>)
 8001c72:	f003 fdcf 	bl	8005814 <memset>
    g_host_default.m_buffer_index = 0;
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    g_host_default.m_packet_index = 0;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    g_host_default.m_process_index = 0;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    g_host_default.m_cmd_callback = NULL;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    g_host_default.m_cmd_arg = NULL;
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <sm_host_create_default+0x90>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    return &g_host_default;
 8001c9e:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <sm_host_create_default+0x90>)
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000410 	.word	0x20000410
 8001cac:	20000412 	.word	0x20000412
 8001cb0:	2000051c 	.word	0x2000051c

08001cb4 <sm_host_reg_handle>:
    }
    _impl(_host)->m_addr = _addr;
    return 0;
}

int32_t sm_host_reg_handle(sm_host_t* _host, sm_host_cmd_callback_fn_t _callback, void* _arg){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
    if(!_host || !_callback){
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <sm_host_reg_handle+0x18>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <sm_host_reg_handle+0x1e>
        return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd0:	e008      	b.n	8001ce4 <sm_host_reg_handle+0x30>
    }
    _impl(_host)->m_cmd_callback = _callback;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    _impl(_host)->m_cmd_arg = _arg;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <sm_host_send_cmd>:
        return -1;
    }
    return _impl(_host)->m_mode;
}

int32_t sm_host_send_cmd(sm_host_t* _host, int32_t _cmd, const uint8_t* _data, int32_t _len){
 8001cee:	b590      	push	{r4, r7, lr}
 8001cf0:	b0c9      	sub	sp, #292	; 0x124
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001cf8:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001cfc:	6020      	str	r0, [r4, #0]
 8001cfe:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001d02:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001d06:	6001      	str	r1, [r0, #0]
 8001d08:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001d0c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8001d10:	600a      	str	r2, [r1, #0]
 8001d12:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001d16:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001d1a:	6013      	str	r3, [r2, #0]
    uint8_t packet[SM_HOST_MAX_BUFFER];
    int32_t len = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t data_len = _len+1+2+1; // 1-cmd, 2-crc, 1-addr
 8001d22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    int32_t index = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    uint16_t crc;

    if(!_host) {
 8001d38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <sm_host_send_cmd+0x5e>
        return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4a:	e0b9      	b.n	8001ec0 <sm_host_send_cmd+0x1d2>
    }

    packet[len++] = SM_PROTO_START_BYTE;
 8001d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d56:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001d5a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d5e:	21aa      	movs	r1, #170	; 0xaa
 8001d60:	54d1      	strb	r1, [r2, r3]
    packet[len++] = (data_len >> 8) & 0xFF;
 8001d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d66:	1219      	asrs	r1, r3, #8
 8001d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d72:	b2c9      	uxtb	r1, r1
 8001d74:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001d78:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d7c:	54d1      	strb	r1, [r2, r3]
    packet[len++] = (data_len & 0xff);
 8001d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d88:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d8c:	b2d1      	uxtb	r1, r2
 8001d8e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001d92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d96:	54d1      	strb	r1, [r2, r3]
    packet[len++] = _impl(_host)->m_addr;
 8001d98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001da2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001da6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	7851      	ldrb	r1, [r2, #1]
 8001dae:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001db2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001db6:	54d1      	strb	r1, [r2, r3]
    packet[len++] = _cmd;
 8001db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001dc2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001dc6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	b2d1      	uxtb	r1, r2
 8001dce:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001dd2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001dd6:	54d1      	strb	r1, [r2, r3]
    for(index = 0; index < _len; index++){
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001dde:	e017      	b.n	8001e10 <sm_host_send_cmd+0x122>
        packet[len++] = _data[index];
 8001de0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001de4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001de8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	441a      	add	r2, r3
 8001df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8001dfa:	7811      	ldrb	r1, [r2, #0]
 8001dfc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001e00:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e04:	54d1      	strb	r1, [r2, r3]
    for(index = 0; index < _len; index++){
 8001e06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001e10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e18:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dbde      	blt.n	8001de0 <sm_host_send_cmd+0xf2>
    }
    crc = sm_CRC_CalculateCRC16(packet, len);
 8001e22:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f97f 	bl	8002130 <sm_CRC_CalculateCRC16>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    packet[len++] = (crc >> 8) & 0xFF;
 8001e38:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	b299      	uxth	r1, r3
 8001e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e4a:	b2c9      	uxtb	r1, r1
 8001e4c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001e50:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e54:	54d1      	strb	r1, [r2, r3]
    packet[len++] = (crc & 0xFF);
 8001e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e60:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8001e64:	b2d1      	uxtb	r1, r2
 8001e66:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001e6a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e6e:	54d1      	strb	r1, [r2, r3]
    packet[len++] = SM_PROTO_STOP_BYTE;
 8001e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e7a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001e7e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e82:	2155      	movs	r1, #85	; 0x55
 8001e84:	54d1      	strb	r1, [r2, r3]

    if(_impl(_host)->m_host_send_if(packet, len, SM_HOST_TIMEOUT_IF_DEFAULT, _impl(_host)->m_arg_if) <= 0){
 8001e86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 4210 	ldr.w	r4, [r3, #528]	; 0x210
 8001e94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001ea2:	f107 0010 	add.w	r0, r7, #16
 8001ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eaa:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001eae:	47a0      	blx	r4
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	dc02      	bgt.n	8001ebc <sm_host_send_cmd+0x1ce>
        return -1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eba:	e001      	b.n	8001ec0 <sm_host_send_cmd+0x1d2>
    }

    return len;
 8001ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}

08001eca <sm_host_process>:
        return -1;
    }
    return len;
}

int sm_host_process(sm_host_t* _host){
 8001eca:	b590      	push	{r4, r7, lr}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]

    if(!_host){
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <sm_host_process+0x14>
        return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001edc:	e0eb      	b.n	80020b6 <sm_host_process+0x1ec>
    }

    sm_host_impl_t* host = _impl(_host);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	617b      	str	r3, [r7, #20]

    if(host->m_mode == SM_HOST_SYNC_MODE && host->m_host_recv_if) {
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d127      	bne.n	8001f3a <sm_host_process+0x70>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d022      	beq.n	8001f3a <sm_host_process+0x70>
        uint8_t data;
        if (host->m_host_recv_if(&data, 1, 0, _impl(_host)->m_arg_if) > 0) {
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001f00:	f107 000b 	add.w	r0, r7, #11
 8001f04:	2200      	movs	r2, #0
 8001f06:	2101      	movs	r1, #1
 8001f08:	47a0      	blx	r4
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	dd14      	ble.n	8001f3a <sm_host_process+0x70>
            host->m_buffer[host->m_buffer_index++] = data;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f16:	1c59      	adds	r1, r3, #1
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
 8001f1e:	7af9      	ldrb	r1, [r7, #11]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	460a      	mov	r2, r1
 8001f26:	709a      	strb	r2, [r3, #2]
            if(host->m_buffer_index >= SM_HOST_MAX_BUFFER){
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	dd03      	ble.n	8001f3a <sm_host_process+0x70>
                host->m_buffer_index = 0;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            }
        }
    }

    int32_t cmd = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
    if (host->m_buffer_index != host->m_process_index){
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	f000 80b2 	beq.w	80020b4 <sm_host_process+0x1ea>
        host->m_packet[host->m_packet_index] = host->m_buffer[host->m_process_index];
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f5c:	6979      	ldr	r1, [r7, #20]
 8001f5e:	440a      	add	r2, r1
 8001f60:	7891      	ldrb	r1, [r2, #2]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4413      	add	r3, r2
 8001f66:	460a      	mov	r2, r1
 8001f68:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

        host->m_process_index++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        if(host->m_process_index >= SM_HOST_MAX_BUFFER){
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f80:	2bff      	cmp	r3, #255	; 0xff
 8001f82:	dd03      	ble.n	8001f8c <sm_host_process+0xc2>
            host->m_process_index = 0;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }


        if(host->m_packet[host->m_packet_index] == SM_PROTO_STOP_BYTE && (host->m_packet_index >= 7)){
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8001f9a:	2b55      	cmp	r3, #85	; 0x55
 8001f9c:	d165      	bne.n	800206a <sm_host_process+0x1a0>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	dd60      	ble.n	800206a <sm_host_process+0x1a0>

            uint32_t buffer_len = (WORD(host->m_packet[SM_PROTO_LENGTH_HIGH_INDEX], host->m_packet[SM_PROTO_LENGTH_LOW_INDEX]) + 3);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	f892 210e 	ldrb.w	r2, [r2, #270]	; 0x10e
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3303      	adds	r3, #3
 8001fba:	60fb      	str	r3, [r7, #12]

            if(buffer_len >= SM_HOST_MAX_COMMUNICATION_BUFFER_SIZE){
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d906      	bls.n	8001fd0 <sm_host_process+0x106>
                host->m_packet_index = 0;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
                return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fce:	e072      	b.n	80020b6 <sm_host_process+0x1ec>
            }

            if(host->m_packet_index > buffer_len){
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d206      	bcs.n	8001fec <sm_host_process+0x122>
                host->m_packet_index = 0;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
                return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fea:	e064      	b.n	80020b6 <sm_host_process+0x1ec>
            }else if(host->m_packet_index == buffer_len){
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d15c      	bne.n	80020b2 <sm_host_process+0x1e8>
                if(host->m_packet[SM_PROTO_DEVICE_ADDR_INDEX] != host->m_addr){
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f893 210f 	ldrb.w	r2, [r3, #271]	; 0x10f
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	785b      	ldrb	r3, [r3, #1]
 8002002:	429a      	cmp	r2, r3
 8002004:	d006      	beq.n	8002014 <sm_host_process+0x14a>
                    host->m_packet_index = 0;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2200      	movs	r2, #0
 800200a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
                    return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	e050      	b.n	80020b6 <sm_host_process+0x1ec>
                }

                if(!sm_CRC_CalculateCRC16(&host->m_packet[SM_PROTO_START_BYTE_INDEX], host->m_packet_index)){
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f000 f884 	bl	8002130 <sm_CRC_CalculateCRC16>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d117      	bne.n	800205e <sm_host_process+0x194>
                    if(host->m_cmd_callback){
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <sm_host_process+0x194>
                        cmd = host->m_packet[SM_PROTO_CMD_INDEX];
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800203e:	613b      	str	r3, [r7, #16]
                        host->m_cmd_callback(cmd,
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
                                             &host->m_packet[SM_PROTO_CMD_DATA_INDEX],
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f203 1111 	addw	r1, r3, #273	; 0x111
                                             host->m_packet_index - 7,
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
                        host->m_cmd_callback(cmd,
 8002052:	1fda      	subs	r2, r3, #7
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800205a:	6938      	ldr	r0, [r7, #16]
 800205c:	47a0      	blx	r4
                                             host->m_cmd_arg);

                    }
                }
                host->m_packet_index = 0;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
                return 1;
 8002066:	2301      	movs	r3, #1
 8002068:	e025      	b.n	80020b6 <sm_host_process+0x1ec>
            }

        }else if((host->m_packet[host->m_packet_index] == SM_PROTO_START_BYTE && host->m_packet_index == SM_PROTO_START_BYTE_INDEX) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4413      	add	r3, r2
 8002074:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8002078:	2baa      	cmp	r3, #170	; 0xaa
 800207a:	d104      	bne.n	8002086 <sm_host_process+0x1bc>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <sm_host_process+0x1c6>
                 (host->m_packet_index > 0)){
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
        }else if((host->m_packet[host->m_packet_index] == SM_PROTO_START_BYTE && host->m_packet_index == SM_PROTO_START_BYTE_INDEX) ||
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd11      	ble.n	80020b4 <sm_host_process+0x1ea>

            host->m_packet_index++;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
            if(host->m_packet_index >= SM_HOST_MAX_BUFFER){
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80020a4:	2bff      	cmp	r3, #255	; 0xff
 80020a6:	dd05      	ble.n	80020b4 <sm_host_process+0x1ea>
                host->m_packet_index = 0;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80020b0:	e000      	b.n	80020b4 <sm_host_process+0x1ea>
        if(host->m_packet[host->m_packet_index] == SM_PROTO_STOP_BYTE && (host->m_packet_index >= 7)){
 80020b2:	bf00      	nop
            }
        }
    }
    return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}

080020be <sm_host_asyn_feed>:

int32_t sm_host_asyn_feed(const uint8_t* _data, int32_t _len, void* _user_data){
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
    sm_host_impl_t* host = (sm_host_impl_t*)_user_data;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	613b      	str	r3, [r7, #16]
    int32_t index = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
    if(!host){
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <sm_host_asyn_feed+0x20>
        return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020dc:	e022      	b.n	8002124 <sm_host_asyn_feed+0x66>
    }
    for(index = 0; index < _len; index++){
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e01a      	b.n	800211a <sm_host_asyn_feed+0x5c>
        host->m_buffer[host->m_buffer_index++] = _data[index];
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	441a      	add	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80020f0:	1c58      	adds	r0, r3, #1
 80020f2:	6939      	ldr	r1, [r7, #16]
 80020f4:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
 80020f8:	7811      	ldrb	r1, [r2, #0]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	460a      	mov	r2, r1
 8002100:	709a      	strb	r2, [r3, #2]
        if(host->m_buffer_index >= SM_HOST_MAX_BUFFER){
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002108:	2bff      	cmp	r3, #255	; 0xff
 800210a:	dd03      	ble.n	8002114 <sm_host_asyn_feed+0x56>
            host->m_buffer_index = 0;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2200      	movs	r2, #0
 8002110:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    for(index = 0; index < _len; index++){
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	dbe0      	blt.n	80020e4 <sm_host_asyn_feed+0x26>
        }
    }
    return 0;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <sm_CRC_CalculateCRC16>:
	return retVal;
}


uint16_t sm_CRC_CalculateCRC16(const uint8_t *Buffer, uint32_t Length)
{
 8002130:	b490      	push	{r4, r7}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	uint32_t retVal = 0u;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
   uint32_t byteIndex = 0u;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]


    if(Buffer != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01f      	beq.n	8002188 <sm_CRC_CalculateCRC16+0x58>

		/* XOR result with specified value */
		retVal ^= CRC_16_XOR_VALUE;

#elif (CRC_16_MODE==TABLE)
		retVal = CRC_16_INIT_VALUE;
 8002148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214c:	60fb      	str	r3, [r7, #12]

		/* Update the CRC using the data */
		for(byteIndex = 0u; byteIndex < Length; byteIndex++)
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	e015      	b.n	8002180 <sm_CRC_CalculateCRC16+0x50>
        {
			retVal = (uint16_t)((retVal << 8u) ^ CRC16Table[(retVal >> 8u) ^ Buffer[byteIndex]]);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	b29b      	uxth	r3, r3
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <sm_CRC_CalculateCRC16+0x68>)
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	687c      	ldr	r4, [r7, #4]
 8002166:	68b8      	ldr	r0, [r7, #8]
 8002168:	4420      	add	r0, r4
 800216a:	7800      	ldrb	r0, [r0, #0]
 800216c:	4043      	eors	r3, r0
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	440b      	add	r3, r1
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	4053      	eors	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	60fb      	str	r3, [r7, #12]
		for(byteIndex = 0u; byteIndex < Length; byteIndex++)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d3e5      	bcc.n	8002154 <sm_CRC_CalculateCRC16+0x24>
		retVal = 0x0000u;

#endif
	}

   return retVal;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	b29b      	uxth	r3, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bc90      	pop	{r4, r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000204 	.word	0x20000204

0800219c <logger_put>:

static const char *log_level_colors[LOG_LEVEL_NUMBER] = {RED,YEL,GRN,RESET, WHT };

static const char *log_level_names[LOG_LEVEL_NUMBER] = {"ERROR","WARN ", "INFO ", "DEBUG", "TRACE" };

static void logger_put(const char *str){
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
	...

080021b0 <sm_logger_init>:
 *
 * @param _fn
 * @param _level
 * @return
 */
int32_t sm_logger_init(logger_output_fn_t _fn, LOG_LEVEL _level){
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
    g_logger.m_level= _level;
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <sm_logger_init+0x24>)
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	7013      	strb	r3, [r2, #0]
    g_logger.m_output_fn = _fn;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <sm_logger_init+0x24>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6053      	str	r3, [r2, #4]

    return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	2000021c 	.word	0x2000021c

080021d8 <sm_logger_show>:
 *
 * @param _level
 * @param _tag
 * @param _log
 */
void sm_logger_show(LOG_LEVEL _level, const char* _tag, const char* _log, ...){
 80021d8:	b40c      	push	{r2, r3}
 80021da:	b580      	push	{r7, lr}
 80021dc:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	4602      	mov	r2, r0
 80021e4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80021e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80021ec:	6019      	str	r1, [r3, #0]
 80021ee:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80021f2:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 80021f6:	701a      	strb	r2, [r3, #0]
    int len = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    char buf[LOG_BUFFER_SIZE + 2] = {0};
 80021fe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002202:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	3304      	adds	r3, #4
 800220c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fafe 	bl	8005814 <memset>
    va_list args;

    if(_level > g_logger.m_level){
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <sm_logger_show+0x118>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002220:	f2a2 4211 	subw	r2, r2, #1041	; 0x411
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d85a      	bhi.n	80022e0 <sm_logger_show+0x108>
        return;
    }

    va_start(args, _log);
 800222a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800222e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002232:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002236:	601a      	str	r2, [r3, #0]

    len = snprintf(buf, LOG_BUFFER_SIZE, "#%s: %s: ", log_level_names[_level], _tag);
 8002238:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800223c:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <sm_logger_show+0x11c>)
 8002244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002248:	f107 0010 	add.w	r0, r7, #16
 800224c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002250:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <sm_logger_show+0x120>)
 800225c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002260:	f003 f982 	bl	8005568 <sniprintf>
 8002264:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
    len += vsnprintf(buf + len, LOG_BUFFER_SIZE - len, _log, args);
 8002268:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800226c:	f107 0210 	add.w	r2, r7, #16
 8002270:	18d0      	adds	r0, r2, r3
 8002272:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8002276:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800227a:	4619      	mov	r1, r3
 800227c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002280:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800228a:	f003 fa0f 	bl	80056ac <vsniprintf>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8002294:	4413      	add	r3, r2
 8002296:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    va_end(args);

    if(len > LOG_BUFFER_SIZE){
 800229a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	dd03      	ble.n	80022ac <sm_logger_show+0xd4>
        len = LOG_BUFFER_SIZE;
 80022a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    }
    buf[len] = '\0';
 80022ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80022b0:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80022b4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80022b8:	4413      	add	r3, r2
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]

    if(g_logger.m_output_fn)
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <sm_logger_show+0x118>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <sm_logger_show+0xfc>
        g_logger.m_output_fn(buf);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <sm_logger_show+0x118>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f107 0210 	add.w	r2, r7, #16
 80022ce:	4610      	mov	r0, r2
 80022d0:	4798      	blx	r3
 80022d2:	e006      	b.n	80022e2 <sm_logger_show+0x10a>
    else{
        logger_put (buf);
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5f 	bl	800219c <logger_put>
 80022de:	e000      	b.n	80022e2 <sm_logger_show+0x10a>
        return;
 80022e0:	bf00      	nop
    }
}
 80022e2:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80022e6:	46bd      	mov	sp, r7
 80022e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022ec:	b002      	add	sp, #8
 80022ee:	4770      	bx	lr
 80022f0:	2000021c 	.word	0x2000021c
 80022f4:	20000208 	.word	0x20000208
 80022f8:	08006548 	.word	0x08006548

080022fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002306:	2003      	movs	r0, #3
 8002308:	f000 f932 	bl	8002570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800230c:	200f      	movs	r0, #15
 800230e:	f000 f80d 	bl	800232c <HAL_InitTick>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	e001      	b.n	8002322 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800231e:	f7ff fa97 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002322:	79fb      	ldrb	r3, [r7, #7]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_InitTick+0x68>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d022      	beq.n	8002386 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_InitTick+0x6c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_InitTick+0x68>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800234c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f940 	bl	80025da <HAL_SYSTICK_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	d809      	bhi.n	800237a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002366:	2200      	movs	r2, #0
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236e:	f000 f90a 	bl	8002586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_InitTick+0x70>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e007      	b.n	800238a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e004      	b.n	800238a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e001      	b.n	800238a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000228 	.word	0x20000228
 8002398:	20000000 	.word	0x20000000
 800239c:	20000224 	.word	0x20000224

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_IncTick+0x1c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x20>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a03      	ldr	r2, [pc, #12]	; (80023bc <HAL_IncTick+0x1c>)
 80023b0:	6013      	str	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000634 	.word	0x20000634
 80023c0:	20000228 	.word	0x20000228

080023c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_GetTick+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000634 	.word	0x20000634

080023d8 <__NVIC_SetPriorityGrouping>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4906      	ldr	r1, [pc, #24]	; (8002470 <__NVIC_EnableIRQ+0x34>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <SysTick_Config>:
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253c:	d301      	bcc.n	8002542 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800253e:	2301      	movs	r3, #1
 8002540:	e00f      	b.n	8002562 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <SysTick_Config+0x40>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254a:	210f      	movs	r1, #15
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002550:	f7ff ff90 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <SysTick_Config+0x40>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <SysTick_Config+0x40>)
 800255c:	2207      	movs	r2, #7
 800255e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000e010 	.word	0xe000e010

08002570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff2d 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff42 	bl	8002420 <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff90 	bl	80024c8 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5f 	bl	8002474 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff35 	bl	800243c <__NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffa2 	bl	800252c <SysTick_Config>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d008      	beq.n	800261c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e022      	b.n	8002662 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020e 	bic.w	r2, r2, #14
 800262a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f003 021c 	and.w	r2, r3, #28
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d005      	beq.n	8002690 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2204      	movs	r2, #4
 8002688:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	e029      	b.n	80026e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020e 	bic.w	r2, r2, #14
 800269e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f003 021c 	and.w	r2, r3, #28
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
    }
  }
  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_FLASH_Program+0x5c>)
 8002702:	7c1b      	ldrb	r3, [r3, #16]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_FLASH_Program+0x1c>
 8002708:	2302      	movs	r3, #2
 800270a:	e01b      	b.n	8002744 <HAL_FLASH_Program+0x54>
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_FLASH_Program+0x5c>)
 800270e:	2201      	movs	r2, #1
 8002710:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002712:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002716:	f000 f86f 	bl	80027f8 <FLASH_WaitForLastOperation>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_FLASH_Program+0x4c>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_FLASH_Program+0x5c>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002734:	f000 f860 	bl	80027f8 <FLASH_WaitForLastOperation>
 8002738:	4603      	mov	r3, r0
 800273a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_FLASH_Program+0x5c>)
 800273e:	2200      	movs	r2, #0
 8002740:	741a      	strb	r2, [r3, #16]

  return status;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000638 	.word	0x20000638

08002750 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d121      	bne.n	80027a4 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10d      	bne.n	8002788 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 800276e:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <HAL_FLASH_Unlock+0x64>)
 8002770:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_FLASH_Unlock+0x68>)
 8002776:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e00e      	b.n	80027a6 <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_FLASH_Unlock+0x6c>)
 800278c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_FLASH_Unlock+0x70>)
 8002792:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_FLASH_Unlock+0x60>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d101      	bne.n	80027a4 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	89abcdef 	.word	0x89abcdef
 80027b8:	02030405 	.word	0x02030405
 80027bc:	8c9daebf 	.word	0x8c9daebf
 80027c0:	13141516 	.word	0x13141516

080027c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_FLASH_Lock+0x1c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_FLASH_Lock+0x1c>)
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_FLASH_GetError+0x10>)
 80027ea:	695b      	ldr	r3, [r3, #20]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000638 	.word	0x20000638

080027f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff fde0 	bl	80023c4 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002806:	e010      	b.n	800282a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280e:	d00c      	beq.n	800282a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <FLASH_WaitForLastOperation+0x2e>
 8002816:	f7ff fdd5 	bl	80023c4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d201      	bcs.n	800282a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e02f      	b.n	800288a <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d0e8      	beq.n	8002808 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	d102      	bne.n	8002848 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 8002844:	2202      	movs	r2, #2
 8002846:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002854:	d014      	beq.n	8002880 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800285e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002862:	d00d      	beq.n	8002880 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d006      	beq.n	8002880 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <FLASH_WaitForLastOperation+0x9c>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800287a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287e:	d103      	bne.n	8002888 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002880:	f000 f80a 	bl	8002898 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00

08002898 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <FLASH_SetErrorCode+0xa4>)
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d109      	bne.n	80028c4 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	4a21      	ldr	r2, [pc, #132]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 80028ba:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <FLASH_SetErrorCode+0xa4>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d0:	d109      	bne.n	80028e6 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	4a19      	ldr	r2, [pc, #100]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 80028dc:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <FLASH_SetErrorCode+0xa4>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f2:	d109      	bne.n	8002908 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	4a10      	ldr	r2, [pc, #64]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 80028fe:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002906:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <FLASH_SetErrorCode+0xa4>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d109      	bne.n	800292a <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <FLASH_SetErrorCode+0xa8>)
 8002920:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002928:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <FLASH_SetErrorCode+0xa4>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6193      	str	r3, [r2, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00
 8002940:	20000638 	.word	0x20000638

08002944 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_FLASHEx_Erase+0xa8>)
 8002958:	7c1b      	ldrb	r3, [r3, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_FLASHEx_Erase+0x1e>
 800295e:	2302      	movs	r3, #2
 8002960:	e040      	b.n	80029e4 <HAL_FLASHEx_Erase+0xa0>
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_FLASHEx_Erase+0xa8>)
 8002964:	2201      	movs	r2, #1
 8002966:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002968:	f24c 3050 	movw	r0, #50000	; 0xc350
 800296c:	f7ff ff44 	bl	80027f8 <FLASH_WaitForLastOperation>
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d130      	bne.n	80029dc <HAL_FLASHEx_Erase+0x98>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002980:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	e01f      	b.n	80029ca <HAL_FLASHEx_Erase+0x86>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 800298a:	68b8      	ldr	r0, [r7, #8]
 800298c:	f000 f832 	bl	80029f4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002990:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002994:	f7ff ff30 	bl	80027f8 <FLASH_WaitForLastOperation>
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_FLASHEx_Erase+0xac>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_FLASHEx_Erase+0xac>)
 80029a2:	f023 0308 	bic.w	r3, r3, #8
 80029a6:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_FLASHEx_Erase+0xac>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <HAL_FLASHEx_Erase+0xac>)
 80029ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b2:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_FLASHEx_Erase+0x7e>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	601a      	str	r2, [r3, #0]
        break;
 80029c0:	e00c      	b.n	80029dc <HAL_FLASHEx_Erase+0x98>
        address += FLASH_PAGE_SIZE)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029c8:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	021a      	lsls	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3d6      	bcc.n	800298a <HAL_FLASHEx_Erase+0x46>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_FLASHEx_Erase+0xa8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	741a      	strb	r2, [r3, #16]

  return status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000638 	.word	0x20000638
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <FLASH_PageErase+0x3c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <FLASH_PageErase+0x40>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <FLASH_PageErase+0x40>)
 8002a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0c:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <FLASH_PageErase+0x40>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <FLASH_PageErase+0x40>)
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a20:	461a      	mov	r2, r3
 8002a22:	2300      	movs	r3, #0
 8002a24:	6013      	str	r3, [r2, #0]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	20000638 	.word	0x20000638
 8002a34:	40023c00 	.word	0x40023c00

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a4e:	e154      	b.n	8002cfa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2101      	movs	r1, #1
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8146 	beq.w	8002cf4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d005      	beq.n	8002a80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d130      	bne.n	8002ae2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0201 	and.w	r2, r3, #1
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d017      	beq.n	8002b1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d123      	bne.n	8002b72 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	6939      	ldr	r1, [r7, #16]
 8002b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0203 	and.w	r2, r3, #3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80a0 	beq.w	8002cf4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_GPIO_Init+0x2e0>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_GPIO_Init+0x2e0>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_GPIO_Init+0x2e0>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bcc:	4a53      	ldr	r2, [pc, #332]	; (8002d1c <HAL_GPIO_Init+0x2e4>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d019      	beq.n	8002c2c <HAL_GPIO_Init+0x1f4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4a      	ldr	r2, [pc, #296]	; (8002d24 <HAL_GPIO_Init+0x2ec>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_GPIO_Init+0x1f0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a49      	ldr	r2, [pc, #292]	; (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1ec>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a48      	ldr	r2, [pc, #288]	; (8002d2c <HAL_GPIO_Init+0x2f4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1e8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a47      	ldr	r2, [pc, #284]	; (8002d30 <HAL_GPIO_Init+0x2f8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1e4>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e008      	b.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	e006      	b.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c20:	2303      	movs	r3, #3
 8002c22:	e004      	b.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	f002 0203 	and.w	r2, r2, #3
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	4093      	lsls	r3, r2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c3e:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_GPIO_Init+0x2e4>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c70:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c76:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c9a:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f aea3 	bne.w	8002a50 <HAL_GPIO_Init+0x18>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e001      	b.n	8002d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	807b      	strh	r3, [r7, #2]
 8002d72:	4613      	mov	r3, r2
 8002d74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d76:	787b      	ldrb	r3, [r7, #1]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d7c:	887a      	ldrh	r2, [r7, #2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d82:	e003      	b.n	8002d8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	041a      	lsls	r2, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e31d      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002daa:	4b94      	ldr	r3, [pc, #592]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db4:	4b91      	ldr	r3, [pc, #580]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d07b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d006      	beq.n	8002dde <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d10f      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5e>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d10b      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dde:	4b87      	ldr	r3, [pc, #540]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d06a      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x128>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d166      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e2f7      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d106      	bne.n	8002e0c <HAL_RCC_OscConfig+0x74>
 8002dfe:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7e      	ldr	r2, [pc, #504]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e02d      	b.n	8002e68 <HAL_RCC_OscConfig+0xd0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10c      	bne.n	8002e2e <HAL_RCC_OscConfig+0x96>
 8002e14:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a78      	ldr	r2, [pc, #480]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0xd0>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0xb8>
 8002e36:	4b71      	ldr	r3, [pc, #452]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a70      	ldr	r2, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b6e      	ldr	r3, [pc, #440]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6d      	ldr	r2, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xd0>
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a66      	ldr	r2, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7ff faa8 	bl	80023c4 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff faa4 	bl	80023c4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e2ad      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xe0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff fa94 	bl	80023c4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff fa90 	bl	80023c4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e299      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eb2:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x108>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d05a      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_OscConfig+0x176>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d116      	bne.n	8002f0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x160>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e276      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	493d      	ldr	r1, [pc, #244]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0c:	e03a      	b.n	8002f84 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d020      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCC_OscConfig+0x268>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fa52 	bl	80023c4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f24:	f7ff fa4e 	bl	80023c4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e257      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	492a      	ldr	r1, [pc, #168]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
 8002f56:	e015      	b.n	8002f84 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_RCC_OscConfig+0x268>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fa31 	bl	80023c4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7ff fa2d 	bl	80023c4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e236      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80b8 	beq.w	8003102 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d170      	bne.n	800307a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x218>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e21a      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d921      	bls.n	8003004 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fc3b 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e208      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4906      	ldr	r1, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	4901      	ldr	r1, [pc, #4]	; (8002ffc <HAL_RCC_OscConfig+0x264>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	e020      	b.n	800303e <HAL_RCC_OscConfig+0x2a6>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	4b99      	ldr	r3, [pc, #612]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4996      	ldr	r1, [pc, #600]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003016:	4b95      	ldr	r3, [pc, #596]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	4991      	ldr	r1, [pc, #580]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fc06 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1d3      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	0b5b      	lsrs	r3, r3, #13
 8003044:	3301      	adds	r3, #1
 8003046:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800304e:	4a87      	ldr	r2, [pc, #540]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	0912      	lsrs	r2, r2, #4
 8003054:	f002 020f 	and.w	r2, r2, #15
 8003058:	4985      	ldr	r1, [pc, #532]	; (8003270 <HAL_RCC_OscConfig+0x4d8>)
 800305a:	5c8a      	ldrb	r2, [r1, r2]
 800305c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800305e:	4a85      	ldr	r2, [pc, #532]	; (8003274 <HAL_RCC_OscConfig+0x4dc>)
 8003060:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003062:	4b85      	ldr	r3, [pc, #532]	; (8003278 <HAL_RCC_OscConfig+0x4e0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f960 	bl	800232c <HAL_InitTick>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d045      	beq.n	8003102 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	e1b5      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d029      	beq.n	80030d6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003082:	4b7e      	ldr	r3, [pc, #504]	; (800327c <HAL_RCC_OscConfig+0x4e4>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff f99c 	bl	80023c4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003090:	f7ff f998 	bl	80023c4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1a1      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	496c      	ldr	r1, [pc, #432]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	4967      	ldr	r1, [pc, #412]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030d6:	4b69      	ldr	r3, [pc, #420]	; (800327c <HAL_RCC_OscConfig+0x4e4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff f972 	bl	80023c4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030e4:	f7ff f96e 	bl	80023c4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e177      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d030      	beq.n	8003170 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7ff f952 	bl	80023c4 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff f94e 	bl	80023c4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e157      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003136:	4b4d      	ldr	r3, [pc, #308]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x38c>
 8003142:	e015      	b.n	8003170 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003144:	4b4e      	ldr	r3, [pc, #312]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7ff f93b 	bl	80023c4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003152:	f7ff f937 	bl	80023c4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e140      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b5 	beq.w	80032e8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	4a36      	ldr	r2, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6253      	str	r3, [r2, #36]	; 0x24
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a32      	ldr	r2, [pc, #200]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7ff f8ff 	bl	80023c4 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7ff f8fb 	bl	80023c4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e104      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x466>
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6353      	str	r3, [r2, #52]	; 0x34
 80031fc:	e02d      	b.n	800325a <HAL_RCC_OscConfig+0x4c2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x488>
 8003206:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 800320c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003210:	6353      	str	r3, [r2, #52]	; 0x34
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800321c:	6353      	str	r3, [r2, #52]	; 0x34
 800321e:	e01c      	b.n	800325a <HAL_RCC_OscConfig+0x4c2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x4aa>
 8003228:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	4a0f      	ldr	r2, [pc, #60]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 800322e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003232:	6353      	str	r3, [r2, #52]	; 0x34
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6353      	str	r3, [r2, #52]	; 0x34
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x4c2>
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	6353      	str	r3, [r2, #52]	; 0x34
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_RCC_OscConfig+0x4d4>)
 8003254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003258:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d024      	beq.n	80032ac <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7ff f8af 	bl	80023c4 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003268:	e019      	b.n	800329e <HAL_RCC_OscConfig+0x506>
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	08006560 	.word	0x08006560
 8003274:	20000000 	.word	0x20000000
 8003278:	20000224 	.word	0x20000224
 800327c:	42470020 	.word	0x42470020
 8003280:	42470680 	.word	0x42470680
 8003284:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7ff f89c 	bl	80023c4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0a3      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0ee      	beq.n	8003288 <HAL_RCC_OscConfig+0x4f0>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7ff f88a 	bl	80023c4 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7ff f886 	bl	80023c4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e08d      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ca:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ee      	bne.n	80032b4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b44      	ldr	r3, [pc, #272]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	4a43      	ldr	r2, [pc, #268]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d079      	beq.n	80033e4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d056      	beq.n	80033a4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d13b      	bne.n	8003376 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b3d      	ldr	r3, [pc, #244]	; (80033f4 <HAL_RCC_OscConfig+0x65c>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7ff f85e 	bl	80023c4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330c:	f7ff f85a 	bl	80023c4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e063      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	4319      	orrs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	430b      	orrs	r3, r1
 8003342:	492b      	ldr	r1, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x65c>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7ff f839 	bl	80023c4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003356:	f7ff f835 	bl	80023c4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e03e      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x5be>
 8003374:	e036      	b.n	80033e4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_RCC_OscConfig+0x65c>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7ff f822 	bl	80023c4 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003384:	f7ff f81e 	bl	80023c4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e027      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x5ec>
 80033a2:	e01f      	b.n	80033e4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e01a      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_RCC_OscConfig+0x658>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d10d      	bne.n	80033e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d106      	bne.n	80033e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470060 	.word	0x42470060

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e11a      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b8f      	ldr	r3, [pc, #572]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d919      	bls.n	800344e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_ClockConfig+0x34>
 8003420:	4b8a      	ldr	r3, [pc, #552]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a89      	ldr	r2, [pc, #548]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b87      	ldr	r3, [pc, #540]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 0201 	bic.w	r2, r3, #1
 8003434:	4985      	ldr	r1, [pc, #532]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343c:	4b83      	ldr	r3, [pc, #524]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0f9      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345a:	4b7d      	ldr	r3, [pc, #500]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	497a      	ldr	r1, [pc, #488]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 808e 	beq.w	8003596 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003482:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d121      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0d7      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800349a:	4b6d      	ldr	r3, [pc, #436]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d115      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0cb      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b2:	4b67      	ldr	r3, [pc, #412]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0bf      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034c2:	4b63      	ldr	r3, [pc, #396]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0b7      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b5f      	ldr	r3, [pc, #380]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	495c      	ldr	r1, [pc, #368]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fe ff6e 	bl	80023c4 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fe ff66 	bl	80023c4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e09b      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800350a:	4b51      	ldr	r3, [pc, #324]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b08      	cmp	r3, #8
 8003514:	d1ee      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xfc>
 8003516:	e03e      	b.n	8003596 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d112      	bne.n	8003546 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003522:	f7fe ff4f 	bl	80023c4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e084      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003538:	4b45      	ldr	r3, [pc, #276]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_ClockConfig+0x12a>
 8003544:	e027      	b.n	8003596 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11d      	bne.n	800358a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003550:	f7fe ff38 	bl	80023c4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e06d      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d1ee      	bne.n	8003550 <HAL_RCC_ClockConfig+0x158>
 8003572:	e010      	b.n	8003596 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe ff26 	bl	80023c4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e05b      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ee      	bne.n	8003574 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d219      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d105      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1be>
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	4923      	ldr	r1, [pc, #140]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <HAL_RCC_ClockConfig+0x254>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e034      	b.n	8003642 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4917      	ldr	r1, [pc, #92]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003602:	4b13      	ldr	r3, [pc, #76]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490f      	ldr	r1, [pc, #60]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f823 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <HAL_RCC_ClockConfig+0x258>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490b      	ldr	r1, [pc, #44]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fe78 	bl	800232c <HAL_InitTick>
 800363c:	4603      	mov	r3, r0
 800363e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003640:	7afb      	ldrb	r3, [r7, #11]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00
 8003650:	40023800 	.word	0x40023800
 8003654:	08006560 	.word	0x08006560
 8003658:	20000000 	.word	0x20000000
 800365c:	20000224 	.word	0x20000224

08003660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b08e      	sub	sp, #56	; 0x38
 8003666:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003668:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_RCC_GetSysClockFreq+0x16c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d00d      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x34>
 8003678:	2b0c      	cmp	r3, #12
 800367a:	f200 8092 	bhi.w	80037a2 <HAL_RCC_GetSysClockFreq+0x142>
 800367e:	2b04      	cmp	r3, #4
 8003680:	d002      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x28>
 8003682:	2b08      	cmp	r3, #8
 8003684:	d003      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x2e>
 8003686:	e08c      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x170>)
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800368c:	e097      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800368e:	4b51      	ldr	r3, [pc, #324]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x174>)
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003692:	e094      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	0c9b      	lsrs	r3, r3, #18
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x178>)
 800369e:	5c9b      	ldrb	r3, [r3, r2]
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	0d9b      	lsrs	r3, r3, #22
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	3301      	adds	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_GetSysClockFreq+0x16c>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d021      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	2200      	movs	r2, #0
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	4b44      	ldr	r3, [pc, #272]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x174>)
 80036c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80036c8:	464a      	mov	r2, r9
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	2300      	movs	r3, #0
 80036d0:	4644      	mov	r4, r8
 80036d2:	fb04 f303 	mul.w	r3, r4, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	4a3e      	ldr	r2, [pc, #248]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x174>)
 80036da:	4644      	mov	r4, r8
 80036dc:	fba4 0102 	umull	r0, r1, r4, r2
 80036e0:	440b      	add	r3, r1
 80036e2:	4619      	mov	r1, r3
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	2200      	movs	r2, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	617a      	str	r2, [r7, #20]
 80036ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036f0:	f7fc fd44 	bl	800017c <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
 80036fc:	e04e      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	2200      	movs	r2, #0
 8003702:	469a      	mov	sl, r3
 8003704:	4693      	mov	fp, r2
 8003706:	4652      	mov	r2, sl
 8003708:	465b      	mov	r3, fp
 800370a:	f04f 0000 	mov.w	r0, #0
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003718:	0150      	lsls	r0, r2, #5
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	ebb2 080a 	subs.w	r8, r2, sl
 8003722:	eb63 090b 	sbc.w	r9, r3, fp
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800373a:	ebb2 0408 	subs.w	r4, r2, r8
 800373e:	eb63 0509 	sbc.w	r5, r3, r9
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	00eb      	lsls	r3, r5, #3
 800374c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003750:	00e2      	lsls	r2, r4, #3
 8003752:	4614      	mov	r4, r2
 8003754:	461d      	mov	r5, r3
 8003756:	eb14 030a 	adds.w	r3, r4, sl
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	eb45 030b 	adc.w	r3, r5, fp
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800376e:	4629      	mov	r1, r5
 8003770:	028b      	lsls	r3, r1, #10
 8003772:	4620      	mov	r0, r4
 8003774:	4629      	mov	r1, r5
 8003776:	4604      	mov	r4, r0
 8003778:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800377c:	4601      	mov	r1, r0
 800377e:	028a      	lsls	r2, r1, #10
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	2200      	movs	r2, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	60fa      	str	r2, [r7, #12]
 800378c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003790:	f7fc fcf4 	bl	800017c <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037a0:	e00d      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_RCC_GetSysClockFreq+0x16c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0b5b      	lsrs	r3, r3, #13
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	3301      	adds	r3, #1
 80037b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3738      	adds	r7, #56	; 0x38
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	016e3600 	.word	0x016e3600
 80037d8:	08006554 	.word	0x08006554

080037dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b02      	ldr	r3, [pc, #8]	; (80037ec <HAL_RCC_GetHCLKFreq+0x10>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20000000 	.word	0x20000000

080037f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037f4:	f7ff fff2 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	08006570 	.word	0x08006570

08003818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800381c:	f7ff ffde 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0adb      	lsrs	r3, r3, #11
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK2Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	08006570 	.word	0x08006570

08003840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800384c:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d12c      	bne.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e016      	b.n	800389e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	6253      	str	r3, [r2, #36]	; 0x24
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003890:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038a4:	d105      	bne.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ac:	d101      	bne.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80038ae:	2301      	movs	r3, #1
 80038b0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 0201 	bic.w	r2, r3, #1
 80038cc:	490b      	ldr	r1, [pc, #44]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d001      	beq.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40007000 	.word	0x40007000
 80038fc:	40023c00 	.word	0x40023c00

08003900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06e      	b.n	80039f0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003922:	d009      	beq.n	8003938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	61da      	str	r2, [r3, #28]
 800392a:	e005      	b.n	8003938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd ffaa 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	ea42 0103 	orr.w	r1, r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	0c1a      	lsrs	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f002 0204 	and.w	r2, r2, #4
 80039de:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e031      	b.n	8003a6e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd ff88 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fa86 	bl	8003f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e031      	b.n	8003aec <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f829 	bl	8003af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 fa47 	bl	8003f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x24>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e022      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d109      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x3e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e015      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d109      	bne.n	8003b60 <HAL_TIM_PWM_Start+0x58>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e008      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e051      	b.n	8003c1e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x82>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003b88:	e013      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x92>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003b98:	e00b      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_PWM_Start+0xa2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ba8:	e003      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fbb1 	bl	8004322 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d00e      	beq.n	8003be8 <HAL_TIM_PWM_Start+0xe0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <HAL_TIM_PWM_Start+0x120>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_TIM_PWM_Start+0xe0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_TIM_PWM_Start+0x124>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_PWM_Start+0xe0>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <HAL_TIM_PWM_Start+0x128>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d111      	bne.n	8003c0c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d010      	beq.n	8003c1c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	e007      	b.n	8003c1c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40010800 	.word	0x40010800

08003c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e0ae      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	f200 809f 	bhi.w	8003da0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003da1 	.word	0x08003da1
 8003c70:	08003da1 	.word	0x08003da1
 8003c74:	08003da1 	.word	0x08003da1
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003da1 	.word	0x08003da1
 8003c80:	08003da1 	.word	0x08003da1
 8003c84:	08003da1 	.word	0x08003da1
 8003c88:	08003d1f 	.word	0x08003d1f
 8003c8c:	08003da1 	.word	0x08003da1
 8003c90:	08003da1 	.word	0x08003da1
 8003c94:	08003da1 	.word	0x08003da1
 8003c98:	08003d5f 	.word	0x08003d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f9b2 	bl	800400c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
      break;
 8003cda:	e064      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f9ce 	bl	8004084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	021a      	lsls	r2, r3, #8
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	619a      	str	r2, [r3, #24]
      break;
 8003d1c:	e043      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f9eb 	bl	8004100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0208 	orr.w	r2, r2, #8
 8003d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0204 	bic.w	r2, r2, #4
 8003d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69d9      	ldr	r1, [r3, #28]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	61da      	str	r2, [r3, #28]
      break;
 8003d5c:	e023      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fa08 	bl	800417a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	61da      	str	r2, [r3, #28]
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
      break;
 8003da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0b4      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x186>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d03e      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0xd4>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	f200 8087 	bhi.w	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	f000 8086 	beq.w	8003f2a <HAL_TIM_ConfigClockSource+0x172>
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	d87f      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d01a      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0xa6>
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d87b      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b60      	cmp	r3, #96	; 0x60
 8003e2e:	d050      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e30:	2b60      	cmp	r3, #96	; 0x60
 8003e32:	d877      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b50      	cmp	r3, #80	; 0x50
 8003e36:	d03c      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d873      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d058      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d86f      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d064      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d86b      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d060      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d867      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05c      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d05a      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	e062      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e6e:	f000 fa39 	bl	80042e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	609a      	str	r2, [r3, #8]
      break;
 8003e8a:	e04f      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e9c:	f000 fa22 	bl	80042e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eae:	609a      	str	r2, [r3, #8]
      break;
 8003eb0:	e03c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 f999 	bl	80041f6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2150      	movs	r1, #80	; 0x50
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f9f0 	bl	80042b0 <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e02c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 f9b7 	bl	8004252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2160      	movs	r1, #96	; 0x60
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f9e0 	bl	80042b0 <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e01c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 f979 	bl	80041f6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f9d0 	bl	80042b0 <TIM_ITRx_SetConfig>
      break;
 8003f10:	e00c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f000 f9c7 	bl	80042b0 <TIM_ITRx_SetConfig>
      break;
 8003f22:	e003      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	e000      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d007      	beq.n	8003f70 <TIM_Base_SetConfig+0x28>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <TIM_Base_SetConfig+0xb0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_Base_SetConfig+0x28>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <TIM_Base_SetConfig+0xb4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d108      	bne.n	8003f82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d013      	beq.n	8003fb2 <TIM_Base_SetConfig+0x6a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <TIM_Base_SetConfig+0xb0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00f      	beq.n	8003fb2 <TIM_Base_SetConfig+0x6a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <TIM_Base_SetConfig+0xb4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_Base_SetConfig+0x6a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <TIM_Base_SetConfig+0xb8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_Base_SetConfig+0x6a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <TIM_Base_SetConfig+0xbc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_Base_SetConfig+0x6a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a16      	ldr	r2, [pc, #88]	; (8004008 <TIM_Base_SetConfig+0xc0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40010800 	.word	0x40010800
 8004004:	40010c00 	.word	0x40010c00
 8004008:	40011000 	.word	0x40011000

0800400c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 0201 	bic.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 0302 	bic.w	r3, r3, #2
 8004054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f023 0210 	bic.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0320 	bic.w	r3, r3, #32
 80040ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800417a:	b480      	push	{r7}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	031b      	lsls	r3, r3, #12
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	621a      	str	r2, [r3, #32]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 0201 	bic.w	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 030a 	bic.w	r3, r3, #10
 8004232:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0210 	bic.w	r2, r3, #16
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f043 0307 	orr.w	r3, r3, #7
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	609a      	str	r2, [r3, #8]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	431a      	orrs	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	609a      	str	r2, [r3, #8]
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2201      	movs	r2, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	43db      	mvns	r3, r3
 8004344:	401a      	ands	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	431a      	orrs	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
	...

0800436c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004380:	2302      	movs	r3, #2
 8004382:	e046      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a13      	ldr	r2, [pc, #76]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40010800 	.word	0x40010800

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e042      	b.n	80044c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fac6 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fdcd 	bl	800500c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d16d      	bne.n	80045c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_UART_Transmit+0x2c>
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e066      	b.n	80045c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2221      	movs	r2, #33	; 0x21
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004506:	f7fd ff5d 	bl	80023c4 <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004520:	d108      	bne.n	8004534 <HAL_UART_Transmit+0x6c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e003      	b.n	800453c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800453c:	e02a      	b.n	8004594 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fb1d 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e036      	b.n	80045c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	3302      	adds	r3, #2
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	e007      	b.n	8004586 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	3301      	adds	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1cf      	bne.n	800453e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 faed 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	4613      	mov	r3, r2
 80045da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d112      	bne.n	800460e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_UART_Receive_IT+0x26>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e00b      	b.n	8004610 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	461a      	mov	r2, r3
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fb2d 	bl	8004c64 <UART_Start_Receive_IT>
 800460a:	4603      	mov	r3, r0
 800460c:	e000      	b.n	8004610 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b0ba      	sub	sp, #232	; 0xe8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <HAL_UART_IRQHandler+0x66>
 800466a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fc0a 	bl	8004e90 <UART_Receive_IT>
      return;
 800467c:	e25b      	b.n	8004b36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800467e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80de 	beq.w	8004844 <HAL_UART_IRQHandler+0x22c>
 8004688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004698:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80d1 	beq.w	8004844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_UART_IRQHandler+0xae>
 80046ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_UART_IRQHandler+0xd2>
 80046d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f043 0202 	orr.w	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_UART_IRQHandler+0xf6>
 80046f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d011      	beq.n	800473e <HAL_UART_IRQHandler+0x126>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f043 0208 	orr.w	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 81f2 	beq.w	8004b2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_UART_IRQHandler+0x14e>
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fb95 	bl	8004e90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d103      	bne.n	8004792 <HAL_UART_IRQHandler+0x17a>
 800478a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04f      	beq.n	8004832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa9f 	bl	8004cd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d141      	bne.n	800482a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3314      	adds	r3, #20
 80047ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1d9      	bne.n	80047a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d013      	beq.n	8004822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	4a7e      	ldr	r2, [pc, #504]	; (80049f8 <HAL_UART_IRQHandler+0x3e0>)
 8004800:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd ff30 	bl	800266c <HAL_DMA_Abort_IT>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800481c:	4610      	mov	r0, r2
 800481e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	e00e      	b.n	8004840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f99c 	bl	8004b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	e00a      	b.n	8004840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f998 	bl	8004b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e006      	b.n	8004840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f994 	bl	8004b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800483e:	e175      	b.n	8004b2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	bf00      	nop
    return;
 8004842:	e173      	b.n	8004b2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	2b01      	cmp	r3, #1
 800484a:	f040 814f 	bne.w	8004aec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8148 	beq.w	8004aec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8141 	beq.w	8004aec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	f040 80b6 	bne.w	80049fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800489c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8145 	beq.w	8004b30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ae:	429a      	cmp	r2, r3
 80048b0:	f080 813e 	bcs.w	8004b30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	f000 8088 	beq.w	80049d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004900:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800490c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1d9      	bne.n	80048c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004938:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800493c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004940:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800494a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e1      	bne.n	8004914 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004974:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004976:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800497a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e3      	bne.n	8004950 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80049bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e3      	bne.n	8004996 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd fe0d 	bl	80025f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8bf 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f4:	e09c      	b.n	8004b30 <HAL_UART_IRQHandler+0x518>
 80049f6:	bf00      	nop
 80049f8:	08004d9b 	.word	0x08004d9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 808e 	beq.w	8004b34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8089 	beq.w	8004b34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a46:	647a      	str	r2, [r7, #68]	; 0x44
 8004a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	623b      	str	r3, [r7, #32]
   return(result);
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e3      	bne.n	8004a5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ac4:	61fa      	str	r2, [r7, #28]
 8004ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e3      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f844 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aea:	e023      	b.n	8004b34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_UART_IRQHandler+0x4f4>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f95c 	bl	8004dc2 <UART_Transmit_IT>
    return;
 8004b0a:	e014      	b.n	8004b36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00e      	beq.n	8004b36 <HAL_UART_IRQHandler+0x51e>
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f99b 	bl	8004e60 <UART_EndTransmit_IT>
    return;
 8004b2a:	e004      	b.n	8004b36 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b34:	bf00      	nop
  }
}
 8004b36:	37e8      	adds	r7, #232	; 0xe8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b090      	sub	sp, #64	; 0x40
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b98:	e050      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba0:	d04c      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba8:	f7fd fc0c 	bl	80023c4 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d241      	bcs.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bd8:	637a      	str	r2, [r7, #52]	; 0x34
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c0c:	623a      	str	r2, [r7, #32]
 8004c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	69f9      	ldr	r1, [r7, #28]
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e00f      	b.n	8004c5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d09f      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3740      	adds	r7, #64	; 0x40
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2222      	movs	r2, #34	; 0x22
 8004c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0220 	orr.w	r2, r2, #32
 8004cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b095      	sub	sp, #84	; 0x54
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cfe:	643a      	str	r2, [r7, #64]	; 0x40
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e5      	bne.n	8004cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3314      	adds	r3, #20
 8004d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e5      	bne.n	8004d12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d119      	bne.n	8004d82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	647b      	str	r3, [r7, #68]	; 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d6e:	61ba      	str	r2, [r7, #24]
 8004d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d90:	bf00      	nop
 8004d92:	3754      	adds	r7, #84	; 0x54
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff fed3 	bl	8004b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b21      	cmp	r3, #33	; 0x21
 8004dd4:	d13e      	bne.n	8004e54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d114      	bne.n	8004e0a <UART_Transmit_IT+0x48>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]
 8004e08:	e008      	b.n	8004e1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6211      	str	r1, [r2, #32]
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10f      	bne.n	8004e50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fe5b 	bl	8004b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	; 0x30
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b22      	cmp	r3, #34	; 0x22
 8004ea2:	f040 80ae 	bne.w	8005002 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	d117      	bne.n	8004ee0 <UART_Receive_IT+0x50>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d113      	bne.n	8004ee0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
 8004ede:	e026      	b.n	8004f2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef2:	d007      	beq.n	8004f04 <UART_Receive_IT+0x74>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <UART_Receive_IT+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e008      	b.n	8004f24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d15d      	bne.n	8004ffe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0220 	bic.w	r2, r2, #32
 8004f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d135      	bne.n	8004ff4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f023 0310 	bic.w	r3, r3, #16
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fae:	623a      	str	r2, [r7, #32]
 8004fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	69f9      	ldr	r1, [r7, #28]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d10a      	bne.n	8004fe6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fdc0 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
 8004ff2:	e002      	b.n	8004ffa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fdaa 	bl	8004b4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e002      	b.n	8005004 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3730      	adds	r7, #48	; 0x30
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4313      	orrs	r3, r2
 8005040:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800504c:	f023 030c 	bic.w	r3, r3, #12
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a55      	ldr	r2, [pc, #340]	; (80051cc <UART_SetConfig+0x1c0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d103      	bne.n	8005082 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800507a:	f7fe fbcd 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	e002      	b.n	8005088 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005082:	f7fe fbb5 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8005086:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005090:	d14c      	bne.n	800512c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	4a49      	ldr	r2, [pc, #292]	; (80051d0 <UART_SetConfig+0x1c4>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	0119      	lsls	r1, r3, #4
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009a      	lsls	r2, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c8:	4b41      	ldr	r3, [pc, #260]	; (80051d0 <UART_SetConfig+0x1c4>)
 80050ca:	fba3 0302 	umull	r0, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2064      	movs	r0, #100	; 0x64
 80050d2:	fb00 f303 	mul.w	r3, r0, r3
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	3332      	adds	r3, #50	; 0x32
 80050dc:	4a3c      	ldr	r2, [pc, #240]	; (80051d0 <UART_SetConfig+0x1c4>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ea:	4419      	add	r1, r3
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009a      	lsls	r2, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005102:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <UART_SetConfig+0x1c4>)
 8005104:	fba3 0302 	umull	r0, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2064      	movs	r0, #100	; 0x64
 800510c:	fb00 f303 	mul.w	r3, r0, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	3332      	adds	r3, #50	; 0x32
 8005116:	4a2e      	ldr	r2, [pc, #184]	; (80051d0 <UART_SetConfig+0x1c4>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f003 0207 	and.w	r2, r3, #7
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	440a      	add	r2, r1
 8005128:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800512a:	e04a      	b.n	80051c2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009a      	lsls	r2, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <UART_SetConfig+0x1c4>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	0119      	lsls	r1, r3, #4
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	009a      	lsls	r2, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <UART_SetConfig+0x1c4>)
 8005164:	fba3 0302 	umull	r0, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	2064      	movs	r0, #100	; 0x64
 800516c:	fb00 f303 	mul.w	r3, r0, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	3332      	adds	r3, #50	; 0x32
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <UART_SetConfig+0x1c4>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005182:	4419      	add	r1, r3
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009a      	lsls	r2, r3, #2
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	fbb2 f2f3 	udiv	r2, r2, r3
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <UART_SetConfig+0x1c4>)
 800519c:	fba3 0302 	umull	r0, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2064      	movs	r0, #100	; 0x64
 80051a4:	fb00 f303 	mul.w	r3, r0, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	; 0x32
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <UART_SetConfig+0x1c4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	440a      	add	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40013800 	.word	0x40013800
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <sbrk_aligned>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4e0e      	ldr	r6, [pc, #56]	; (8005210 <sbrk_aligned+0x3c>)
 80051d8:	460c      	mov	r4, r1
 80051da:	6831      	ldr	r1, [r6, #0]
 80051dc:	4605      	mov	r5, r0
 80051de:	b911      	cbnz	r1, 80051e6 <sbrk_aligned+0x12>
 80051e0:	f000 fb54 	bl	800588c <_sbrk_r>
 80051e4:	6030      	str	r0, [r6, #0]
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fb4f 	bl	800588c <_sbrk_r>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d00a      	beq.n	8005208 <sbrk_aligned+0x34>
 80051f2:	1cc4      	adds	r4, r0, #3
 80051f4:	f024 0403 	bic.w	r4, r4, #3
 80051f8:	42a0      	cmp	r0, r4
 80051fa:	d007      	beq.n	800520c <sbrk_aligned+0x38>
 80051fc:	1a21      	subs	r1, r4, r0
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 fb44 	bl	800588c <_sbrk_r>
 8005204:	3001      	adds	r0, #1
 8005206:	d101      	bne.n	800520c <sbrk_aligned+0x38>
 8005208:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800520c:	4620      	mov	r0, r4
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	20000654 	.word	0x20000654

08005214 <_malloc_r>:
 8005214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005218:	1ccd      	adds	r5, r1, #3
 800521a:	f025 0503 	bic.w	r5, r5, #3
 800521e:	3508      	adds	r5, #8
 8005220:	2d0c      	cmp	r5, #12
 8005222:	bf38      	it	cc
 8005224:	250c      	movcc	r5, #12
 8005226:	2d00      	cmp	r5, #0
 8005228:	4607      	mov	r7, r0
 800522a:	db01      	blt.n	8005230 <_malloc_r+0x1c>
 800522c:	42a9      	cmp	r1, r5
 800522e:	d905      	bls.n	800523c <_malloc_r+0x28>
 8005230:	230c      	movs	r3, #12
 8005232:	2600      	movs	r6, #0
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4630      	mov	r0, r6
 8005238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005310 <_malloc_r+0xfc>
 8005240:	f000 f868 	bl	8005314 <__malloc_lock>
 8005244:	f8d8 3000 	ldr.w	r3, [r8]
 8005248:	461c      	mov	r4, r3
 800524a:	bb5c      	cbnz	r4, 80052a4 <_malloc_r+0x90>
 800524c:	4629      	mov	r1, r5
 800524e:	4638      	mov	r0, r7
 8005250:	f7ff ffc0 	bl	80051d4 <sbrk_aligned>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	4604      	mov	r4, r0
 8005258:	d155      	bne.n	8005306 <_malloc_r+0xf2>
 800525a:	f8d8 4000 	ldr.w	r4, [r8]
 800525e:	4626      	mov	r6, r4
 8005260:	2e00      	cmp	r6, #0
 8005262:	d145      	bne.n	80052f0 <_malloc_r+0xdc>
 8005264:	2c00      	cmp	r4, #0
 8005266:	d048      	beq.n	80052fa <_malloc_r+0xe6>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	4631      	mov	r1, r6
 800526c:	4638      	mov	r0, r7
 800526e:	eb04 0903 	add.w	r9, r4, r3
 8005272:	f000 fb0b 	bl	800588c <_sbrk_r>
 8005276:	4581      	cmp	r9, r0
 8005278:	d13f      	bne.n	80052fa <_malloc_r+0xe6>
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	4638      	mov	r0, r7
 800527e:	1a6d      	subs	r5, r5, r1
 8005280:	4629      	mov	r1, r5
 8005282:	f7ff ffa7 	bl	80051d4 <sbrk_aligned>
 8005286:	3001      	adds	r0, #1
 8005288:	d037      	beq.n	80052fa <_malloc_r+0xe6>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	442b      	add	r3, r5
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	f8d8 3000 	ldr.w	r3, [r8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d038      	beq.n	800530a <_malloc_r+0xf6>
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	42a2      	cmp	r2, r4
 800529c:	d12b      	bne.n	80052f6 <_malloc_r+0xe2>
 800529e:	2200      	movs	r2, #0
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	e00f      	b.n	80052c4 <_malloc_r+0xb0>
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	1b52      	subs	r2, r2, r5
 80052a8:	d41f      	bmi.n	80052ea <_malloc_r+0xd6>
 80052aa:	2a0b      	cmp	r2, #11
 80052ac:	d917      	bls.n	80052de <_malloc_r+0xca>
 80052ae:	1961      	adds	r1, r4, r5
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	6025      	str	r5, [r4, #0]
 80052b4:	bf18      	it	ne
 80052b6:	6059      	strne	r1, [r3, #4]
 80052b8:	6863      	ldr	r3, [r4, #4]
 80052ba:	bf08      	it	eq
 80052bc:	f8c8 1000 	streq.w	r1, [r8]
 80052c0:	5162      	str	r2, [r4, r5]
 80052c2:	604b      	str	r3, [r1, #4]
 80052c4:	4638      	mov	r0, r7
 80052c6:	f104 060b 	add.w	r6, r4, #11
 80052ca:	f000 f829 	bl	8005320 <__malloc_unlock>
 80052ce:	f026 0607 	bic.w	r6, r6, #7
 80052d2:	1d23      	adds	r3, r4, #4
 80052d4:	1af2      	subs	r2, r6, r3
 80052d6:	d0ae      	beq.n	8005236 <_malloc_r+0x22>
 80052d8:	1b9b      	subs	r3, r3, r6
 80052da:	50a3      	str	r3, [r4, r2]
 80052dc:	e7ab      	b.n	8005236 <_malloc_r+0x22>
 80052de:	42a3      	cmp	r3, r4
 80052e0:	6862      	ldr	r2, [r4, #4]
 80052e2:	d1dd      	bne.n	80052a0 <_malloc_r+0x8c>
 80052e4:	f8c8 2000 	str.w	r2, [r8]
 80052e8:	e7ec      	b.n	80052c4 <_malloc_r+0xb0>
 80052ea:	4623      	mov	r3, r4
 80052ec:	6864      	ldr	r4, [r4, #4]
 80052ee:	e7ac      	b.n	800524a <_malloc_r+0x36>
 80052f0:	4634      	mov	r4, r6
 80052f2:	6876      	ldr	r6, [r6, #4]
 80052f4:	e7b4      	b.n	8005260 <_malloc_r+0x4c>
 80052f6:	4613      	mov	r3, r2
 80052f8:	e7cc      	b.n	8005294 <_malloc_r+0x80>
 80052fa:	230c      	movs	r3, #12
 80052fc:	4638      	mov	r0, r7
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	f000 f80e 	bl	8005320 <__malloc_unlock>
 8005304:	e797      	b.n	8005236 <_malloc_r+0x22>
 8005306:	6025      	str	r5, [r4, #0]
 8005308:	e7dc      	b.n	80052c4 <_malloc_r+0xb0>
 800530a:	605b      	str	r3, [r3, #4]
 800530c:	deff      	udf	#255	; 0xff
 800530e:	bf00      	nop
 8005310:	20000650 	.word	0x20000650

08005314 <__malloc_lock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_lock+0x8>)
 8005316:	f000 bb06 	b.w	8005926 <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	20000798 	.word	0x20000798

08005320 <__malloc_unlock>:
 8005320:	4801      	ldr	r0, [pc, #4]	; (8005328 <__malloc_unlock+0x8>)
 8005322:	f000 bb01 	b.w	8005928 <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	20000798 	.word	0x20000798

0800532c <std>:
 800532c:	2300      	movs	r3, #0
 800532e:	b510      	push	{r4, lr}
 8005330:	4604      	mov	r4, r0
 8005332:	e9c0 3300 	strd	r3, r3, [r0]
 8005336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800533a:	6083      	str	r3, [r0, #8]
 800533c:	8181      	strh	r1, [r0, #12]
 800533e:	6643      	str	r3, [r0, #100]	; 0x64
 8005340:	81c2      	strh	r2, [r0, #14]
 8005342:	6183      	str	r3, [r0, #24]
 8005344:	4619      	mov	r1, r3
 8005346:	2208      	movs	r2, #8
 8005348:	305c      	adds	r0, #92	; 0x5c
 800534a:	f000 fa63 	bl	8005814 <memset>
 800534e:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <std+0x58>)
 8005350:	6224      	str	r4, [r4, #32]
 8005352:	6263      	str	r3, [r4, #36]	; 0x24
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <std+0x5c>)
 8005356:	62a3      	str	r3, [r4, #40]	; 0x28
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <std+0x60>)
 800535a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <std+0x64>)
 800535e:	6323      	str	r3, [r4, #48]	; 0x30
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <std+0x68>)
 8005362:	429c      	cmp	r4, r3
 8005364:	d006      	beq.n	8005374 <std+0x48>
 8005366:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800536a:	4294      	cmp	r4, r2
 800536c:	d002      	beq.n	8005374 <std+0x48>
 800536e:	33d0      	adds	r3, #208	; 0xd0
 8005370:	429c      	cmp	r4, r3
 8005372:	d105      	bne.n	8005380 <std+0x54>
 8005374:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f000 bad2 	b.w	8005924 <__retarget_lock_init_recursive>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	bf00      	nop
 8005384:	080055d1 	.word	0x080055d1
 8005388:	080055f3 	.word	0x080055f3
 800538c:	0800562b 	.word	0x0800562b
 8005390:	0800564f 	.word	0x0800564f
 8005394:	20000658 	.word	0x20000658

08005398 <stdio_exit_handler>:
 8005398:	4a02      	ldr	r2, [pc, #8]	; (80053a4 <stdio_exit_handler+0xc>)
 800539a:	4903      	ldr	r1, [pc, #12]	; (80053a8 <stdio_exit_handler+0x10>)
 800539c:	4803      	ldr	r0, [pc, #12]	; (80053ac <stdio_exit_handler+0x14>)
 800539e:	f000 b869 	b.w	8005474 <_fwalk_sglue>
 80053a2:	bf00      	nop
 80053a4:	2000022c 	.word	0x2000022c
 80053a8:	080060b5 	.word	0x080060b5
 80053ac:	20000238 	.word	0x20000238

080053b0 <cleanup_stdio>:
 80053b0:	6841      	ldr	r1, [r0, #4]
 80053b2:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <cleanup_stdio+0x34>)
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4299      	cmp	r1, r3
 80053b8:	4604      	mov	r4, r0
 80053ba:	d001      	beq.n	80053c0 <cleanup_stdio+0x10>
 80053bc:	f000 fe7a 	bl	80060b4 <_fflush_r>
 80053c0:	68a1      	ldr	r1, [r4, #8]
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <cleanup_stdio+0x38>)
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d002      	beq.n	80053ce <cleanup_stdio+0x1e>
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fe73 	bl	80060b4 <_fflush_r>
 80053ce:	68e1      	ldr	r1, [r4, #12]
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <cleanup_stdio+0x3c>)
 80053d2:	4299      	cmp	r1, r3
 80053d4:	d004      	beq.n	80053e0 <cleanup_stdio+0x30>
 80053d6:	4620      	mov	r0, r4
 80053d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053dc:	f000 be6a 	b.w	80060b4 <_fflush_r>
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	bf00      	nop
 80053e4:	20000658 	.word	0x20000658
 80053e8:	200006c0 	.word	0x200006c0
 80053ec:	20000728 	.word	0x20000728

080053f0 <global_stdio_init.part.0>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <global_stdio_init.part.0+0x30>)
 80053f4:	4c0b      	ldr	r4, [pc, #44]	; (8005424 <global_stdio_init.part.0+0x34>)
 80053f6:	4a0c      	ldr	r2, [pc, #48]	; (8005428 <global_stdio_init.part.0+0x38>)
 80053f8:	4620      	mov	r0, r4
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	2104      	movs	r1, #4
 80053fe:	2200      	movs	r2, #0
 8005400:	f7ff ff94 	bl	800532c <std>
 8005404:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005408:	2201      	movs	r2, #1
 800540a:	2109      	movs	r1, #9
 800540c:	f7ff ff8e 	bl	800532c <std>
 8005410:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005414:	2202      	movs	r2, #2
 8005416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541a:	2112      	movs	r1, #18
 800541c:	f7ff bf86 	b.w	800532c <std>
 8005420:	20000790 	.word	0x20000790
 8005424:	20000658 	.word	0x20000658
 8005428:	08005399 	.word	0x08005399

0800542c <__sfp_lock_acquire>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__sfp_lock_acquire+0x8>)
 800542e:	f000 ba7a 	b.w	8005926 <__retarget_lock_acquire_recursive>
 8005432:	bf00      	nop
 8005434:	20000799 	.word	0x20000799

08005438 <__sfp_lock_release>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__sfp_lock_release+0x8>)
 800543a:	f000 ba75 	b.w	8005928 <__retarget_lock_release_recursive>
 800543e:	bf00      	nop
 8005440:	20000799 	.word	0x20000799

08005444 <__sinit>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	f7ff fff0 	bl	800542c <__sfp_lock_acquire>
 800544c:	6a23      	ldr	r3, [r4, #32]
 800544e:	b11b      	cbz	r3, 8005458 <__sinit+0x14>
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005454:	f7ff bff0 	b.w	8005438 <__sfp_lock_release>
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <__sinit+0x28>)
 800545a:	6223      	str	r3, [r4, #32]
 800545c:	4b04      	ldr	r3, [pc, #16]	; (8005470 <__sinit+0x2c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f5      	bne.n	8005450 <__sinit+0xc>
 8005464:	f7ff ffc4 	bl	80053f0 <global_stdio_init.part.0>
 8005468:	e7f2      	b.n	8005450 <__sinit+0xc>
 800546a:	bf00      	nop
 800546c:	080053b1 	.word	0x080053b1
 8005470:	20000790 	.word	0x20000790

08005474 <_fwalk_sglue>:
 8005474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005478:	4607      	mov	r7, r0
 800547a:	4688      	mov	r8, r1
 800547c:	4614      	mov	r4, r2
 800547e:	2600      	movs	r6, #0
 8005480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005484:	f1b9 0901 	subs.w	r9, r9, #1
 8005488:	d505      	bpl.n	8005496 <_fwalk_sglue+0x22>
 800548a:	6824      	ldr	r4, [r4, #0]
 800548c:	2c00      	cmp	r4, #0
 800548e:	d1f7      	bne.n	8005480 <_fwalk_sglue+0xc>
 8005490:	4630      	mov	r0, r6
 8005492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005496:	89ab      	ldrh	r3, [r5, #12]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d907      	bls.n	80054ac <_fwalk_sglue+0x38>
 800549c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054a0:	3301      	adds	r3, #1
 80054a2:	d003      	beq.n	80054ac <_fwalk_sglue+0x38>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c0      	blx	r8
 80054aa:	4306      	orrs	r6, r0
 80054ac:	3568      	adds	r5, #104	; 0x68
 80054ae:	e7e9      	b.n	8005484 <_fwalk_sglue+0x10>

080054b0 <_puts_r>:
 80054b0:	6a03      	ldr	r3, [r0, #32]
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	4605      	mov	r5, r0
 80054b6:	460e      	mov	r6, r1
 80054b8:	6884      	ldr	r4, [r0, #8]
 80054ba:	b90b      	cbnz	r3, 80054c0 <_puts_r+0x10>
 80054bc:	f7ff ffc2 	bl	8005444 <__sinit>
 80054c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054c2:	07db      	lsls	r3, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x22>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	0598      	lsls	r0, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x22>
 80054cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ce:	f000 fa2a 	bl	8005926 <__retarget_lock_acquire_recursive>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	0719      	lsls	r1, r3, #28
 80054d6:	d513      	bpl.n	8005500 <_puts_r+0x50>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	b18b      	cbz	r3, 8005500 <_puts_r+0x50>
 80054dc:	3e01      	subs	r6, #1
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054e4:	3b01      	subs	r3, #1
 80054e6:	60a3      	str	r3, [r4, #8]
 80054e8:	b9e9      	cbnz	r1, 8005526 <_puts_r+0x76>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da2e      	bge.n	800554c <_puts_r+0x9c>
 80054ee:	4622      	mov	r2, r4
 80054f0:	210a      	movs	r1, #10
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 f8e8 	bl	80056c8 <__swbuf_r>
 80054f8:	3001      	adds	r0, #1
 80054fa:	d007      	beq.n	800550c <_puts_r+0x5c>
 80054fc:	250a      	movs	r5, #10
 80054fe:	e007      	b.n	8005510 <_puts_r+0x60>
 8005500:	4621      	mov	r1, r4
 8005502:	4628      	mov	r0, r5
 8005504:	f000 f91e 	bl	8005744 <__swsetup_r>
 8005508:	2800      	cmp	r0, #0
 800550a:	d0e7      	beq.n	80054dc <_puts_r+0x2c>
 800550c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005512:	07da      	lsls	r2, r3, #31
 8005514:	d405      	bmi.n	8005522 <_puts_r+0x72>
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	059b      	lsls	r3, r3, #22
 800551a:	d402      	bmi.n	8005522 <_puts_r+0x72>
 800551c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800551e:	f000 fa03 	bl	8005928 <__retarget_lock_release_recursive>
 8005522:	4628      	mov	r0, r5
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	2b00      	cmp	r3, #0
 8005528:	da04      	bge.n	8005534 <_puts_r+0x84>
 800552a:	69a2      	ldr	r2, [r4, #24]
 800552c:	429a      	cmp	r2, r3
 800552e:	dc06      	bgt.n	800553e <_puts_r+0x8e>
 8005530:	290a      	cmp	r1, #10
 8005532:	d004      	beq.n	800553e <_puts_r+0x8e>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	6022      	str	r2, [r4, #0]
 800553a:	7019      	strb	r1, [r3, #0]
 800553c:	e7cf      	b.n	80054de <_puts_r+0x2e>
 800553e:	4622      	mov	r2, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f8c1 	bl	80056c8 <__swbuf_r>
 8005546:	3001      	adds	r0, #1
 8005548:	d1c9      	bne.n	80054de <_puts_r+0x2e>
 800554a:	e7df      	b.n	800550c <_puts_r+0x5c>
 800554c:	250a      	movs	r5, #10
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	701d      	strb	r5, [r3, #0]
 8005556:	e7db      	b.n	8005510 <_puts_r+0x60>

08005558 <puts>:
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <puts+0xc>)
 800555a:	4601      	mov	r1, r0
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	f7ff bfa7 	b.w	80054b0 <_puts_r>
 8005562:	bf00      	nop
 8005564:	20000284 	.word	0x20000284

08005568 <sniprintf>:
 8005568:	b40c      	push	{r2, r3}
 800556a:	b530      	push	{r4, r5, lr}
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <sniprintf+0x64>)
 800556e:	1e0c      	subs	r4, r1, #0
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	b09d      	sub	sp, #116	; 0x74
 8005574:	da08      	bge.n	8005588 <sniprintf+0x20>
 8005576:	238b      	movs	r3, #139	; 0x8b
 8005578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	b01d      	add	sp, #116	; 0x74
 8005580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005584:	b002      	add	sp, #8
 8005586:	4770      	bx	lr
 8005588:	f44f 7302 	mov.w	r3, #520	; 0x208
 800558c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005590:	bf0c      	ite	eq
 8005592:	4623      	moveq	r3, r4
 8005594:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a0:	9002      	str	r0, [sp, #8]
 80055a2:	9006      	str	r0, [sp, #24]
 80055a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055a8:	4628      	mov	r0, r5
 80055aa:	ab21      	add	r3, sp, #132	; 0x84
 80055ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055ae:	a902      	add	r1, sp, #8
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	f000 fa6b 	bl	8005a8c <_svfiprintf_r>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	bfbc      	itt	lt
 80055ba:	238b      	movlt	r3, #139	; 0x8b
 80055bc:	602b      	strlt	r3, [r5, #0]
 80055be:	2c00      	cmp	r4, #0
 80055c0:	d0dd      	beq.n	800557e <sniprintf+0x16>
 80055c2:	2200      	movs	r2, #0
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e7d9      	b.n	800557e <sniprintf+0x16>
 80055ca:	bf00      	nop
 80055cc:	20000284 	.word	0x20000284

080055d0 <__sread>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	460c      	mov	r4, r1
 80055d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d8:	f000 f946 	bl	8005868 <_read_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	bfab      	itete	ge
 80055e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055e2:	89a3      	ldrhlt	r3, [r4, #12]
 80055e4:	181b      	addge	r3, r3, r0
 80055e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ea:	bfac      	ite	ge
 80055ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ee:	81a3      	strhlt	r3, [r4, #12]
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__swrite>:
 80055f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	461f      	mov	r7, r3
 80055f8:	898b      	ldrh	r3, [r1, #12]
 80055fa:	4605      	mov	r5, r0
 80055fc:	05db      	lsls	r3, r3, #23
 80055fe:	460c      	mov	r4, r1
 8005600:	4616      	mov	r6, r2
 8005602:	d505      	bpl.n	8005610 <__swrite+0x1e>
 8005604:	2302      	movs	r3, #2
 8005606:	2200      	movs	r2, #0
 8005608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560c:	f000 f91a 	bl	8005844 <_lseek_r>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	4632      	mov	r2, r6
 8005614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005618:	81a3      	strh	r3, [r4, #12]
 800561a:	4628      	mov	r0, r5
 800561c:	463b      	mov	r3, r7
 800561e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005626:	f000 b941 	b.w	80058ac <_write_r>

0800562a <__sseek>:
 800562a:	b510      	push	{r4, lr}
 800562c:	460c      	mov	r4, r1
 800562e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005632:	f000 f907 	bl	8005844 <_lseek_r>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	bf15      	itete	ne
 800563c:	6560      	strne	r0, [r4, #84]	; 0x54
 800563e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005646:	81a3      	strheq	r3, [r4, #12]
 8005648:	bf18      	it	ne
 800564a:	81a3      	strhne	r3, [r4, #12]
 800564c:	bd10      	pop	{r4, pc}

0800564e <__sclose>:
 800564e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005652:	f000 b8e7 	b.w	8005824 <_close_r>

08005656 <_vsniprintf_r>:
 8005656:	b530      	push	{r4, r5, lr}
 8005658:	4614      	mov	r4, r2
 800565a:	2c00      	cmp	r4, #0
 800565c:	4605      	mov	r5, r0
 800565e:	461a      	mov	r2, r3
 8005660:	b09b      	sub	sp, #108	; 0x6c
 8005662:	da05      	bge.n	8005670 <_vsniprintf_r+0x1a>
 8005664:	238b      	movs	r3, #139	; 0x8b
 8005666:	6003      	str	r3, [r0, #0]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800566c:	b01b      	add	sp, #108	; 0x6c
 800566e:	bd30      	pop	{r4, r5, pc}
 8005670:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005674:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005678:	bf0c      	ite	eq
 800567a:	4623      	moveq	r3, r4
 800567c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005688:	9100      	str	r1, [sp, #0]
 800568a:	9104      	str	r1, [sp, #16]
 800568c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005690:	4669      	mov	r1, sp
 8005692:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005694:	f000 f9fa 	bl	8005a8c <_svfiprintf_r>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	bfbc      	itt	lt
 800569c:	238b      	movlt	r3, #139	; 0x8b
 800569e:	602b      	strlt	r3, [r5, #0]
 80056a0:	2c00      	cmp	r4, #0
 80056a2:	d0e3      	beq.n	800566c <_vsniprintf_r+0x16>
 80056a4:	2200      	movs	r2, #0
 80056a6:	9b00      	ldr	r3, [sp, #0]
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e7df      	b.n	800566c <_vsniprintf_r+0x16>

080056ac <vsniprintf>:
 80056ac:	b507      	push	{r0, r1, r2, lr}
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	460a      	mov	r2, r1
 80056b4:	4601      	mov	r1, r0
 80056b6:	4803      	ldr	r0, [pc, #12]	; (80056c4 <vsniprintf+0x18>)
 80056b8:	6800      	ldr	r0, [r0, #0]
 80056ba:	f7ff ffcc 	bl	8005656 <_vsniprintf_r>
 80056be:	b003      	add	sp, #12
 80056c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80056c4:	20000284 	.word	0x20000284

080056c8 <__swbuf_r>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	460e      	mov	r6, r1
 80056cc:	4614      	mov	r4, r2
 80056ce:	4605      	mov	r5, r0
 80056d0:	b118      	cbz	r0, 80056da <__swbuf_r+0x12>
 80056d2:	6a03      	ldr	r3, [r0, #32]
 80056d4:	b90b      	cbnz	r3, 80056da <__swbuf_r+0x12>
 80056d6:	f7ff feb5 	bl	8005444 <__sinit>
 80056da:	69a3      	ldr	r3, [r4, #24]
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	071a      	lsls	r2, r3, #28
 80056e2:	d525      	bpl.n	8005730 <__swbuf_r+0x68>
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	b31b      	cbz	r3, 8005730 <__swbuf_r+0x68>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	6922      	ldr	r2, [r4, #16]
 80056ec:	b2f6      	uxtb	r6, r6
 80056ee:	1a98      	subs	r0, r3, r2
 80056f0:	6963      	ldr	r3, [r4, #20]
 80056f2:	4637      	mov	r7, r6
 80056f4:	4283      	cmp	r3, r0
 80056f6:	dc04      	bgt.n	8005702 <__swbuf_r+0x3a>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 fcda 	bl	80060b4 <_fflush_r>
 8005700:	b9e0      	cbnz	r0, 800573c <__swbuf_r+0x74>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	3b01      	subs	r3, #1
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	701e      	strb	r6, [r3, #0]
 8005710:	6962      	ldr	r2, [r4, #20]
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	429a      	cmp	r2, r3
 8005716:	d004      	beq.n	8005722 <__swbuf_r+0x5a>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	07db      	lsls	r3, r3, #31
 800571c:	d506      	bpl.n	800572c <__swbuf_r+0x64>
 800571e:	2e0a      	cmp	r6, #10
 8005720:	d104      	bne.n	800572c <__swbuf_r+0x64>
 8005722:	4621      	mov	r1, r4
 8005724:	4628      	mov	r0, r5
 8005726:	f000 fcc5 	bl	80060b4 <_fflush_r>
 800572a:	b938      	cbnz	r0, 800573c <__swbuf_r+0x74>
 800572c:	4638      	mov	r0, r7
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	4621      	mov	r1, r4
 8005732:	4628      	mov	r0, r5
 8005734:	f000 f806 	bl	8005744 <__swsetup_r>
 8005738:	2800      	cmp	r0, #0
 800573a:	d0d5      	beq.n	80056e8 <__swbuf_r+0x20>
 800573c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005740:	e7f4      	b.n	800572c <__swbuf_r+0x64>
	...

08005744 <__swsetup_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <__swsetup_r+0xac>)
 8005748:	4605      	mov	r5, r0
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	460c      	mov	r4, r1
 800574e:	b118      	cbz	r0, 8005758 <__swsetup_r+0x14>
 8005750:	6a03      	ldr	r3, [r0, #32]
 8005752:	b90b      	cbnz	r3, 8005758 <__swsetup_r+0x14>
 8005754:	f7ff fe76 	bl	8005444 <__sinit>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800575e:	0718      	lsls	r0, r3, #28
 8005760:	d422      	bmi.n	80057a8 <__swsetup_r+0x64>
 8005762:	06d9      	lsls	r1, r3, #27
 8005764:	d407      	bmi.n	8005776 <__swsetup_r+0x32>
 8005766:	2309      	movs	r3, #9
 8005768:	602b      	str	r3, [r5, #0]
 800576a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800576e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	e034      	b.n	80057e0 <__swsetup_r+0x9c>
 8005776:	0758      	lsls	r0, r3, #29
 8005778:	d512      	bpl.n	80057a0 <__swsetup_r+0x5c>
 800577a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800577c:	b141      	cbz	r1, 8005790 <__swsetup_r+0x4c>
 800577e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005782:	4299      	cmp	r1, r3
 8005784:	d002      	beq.n	800578c <__swsetup_r+0x48>
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f8de 	bl	8005948 <_free_r>
 800578c:	2300      	movs	r3, #0
 800578e:	6363      	str	r3, [r4, #52]	; 0x34
 8005790:	89a3      	ldrh	r3, [r4, #12]
 8005792:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	2300      	movs	r3, #0
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	f043 0308 	orr.w	r3, r3, #8
 80057a6:	81a3      	strh	r3, [r4, #12]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b94b      	cbnz	r3, 80057c0 <__swsetup_r+0x7c>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b6:	d003      	beq.n	80057c0 <__swsetup_r+0x7c>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 fcc7 	bl	800614e <__smakebuf_r>
 80057c0:	89a0      	ldrh	r0, [r4, #12]
 80057c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057c6:	f010 0301 	ands.w	r3, r0, #1
 80057ca:	d00a      	beq.n	80057e2 <__swsetup_r+0x9e>
 80057cc:	2300      	movs	r3, #0
 80057ce:	60a3      	str	r3, [r4, #8]
 80057d0:	6963      	ldr	r3, [r4, #20]
 80057d2:	425b      	negs	r3, r3
 80057d4:	61a3      	str	r3, [r4, #24]
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	b943      	cbnz	r3, 80057ec <__swsetup_r+0xa8>
 80057da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057de:	d1c4      	bne.n	800576a <__swsetup_r+0x26>
 80057e0:	bd38      	pop	{r3, r4, r5, pc}
 80057e2:	0781      	lsls	r1, r0, #30
 80057e4:	bf58      	it	pl
 80057e6:	6963      	ldrpl	r3, [r4, #20]
 80057e8:	60a3      	str	r3, [r4, #8]
 80057ea:	e7f4      	b.n	80057d6 <__swsetup_r+0x92>
 80057ec:	2000      	movs	r0, #0
 80057ee:	e7f7      	b.n	80057e0 <__swsetup_r+0x9c>
 80057f0:	20000284 	.word	0x20000284

080057f4 <memcmp>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	3901      	subs	r1, #1
 80057f8:	4402      	add	r2, r0
 80057fa:	4290      	cmp	r0, r2
 80057fc:	d101      	bne.n	8005802 <memcmp+0xe>
 80057fe:	2000      	movs	r0, #0
 8005800:	e005      	b.n	800580e <memcmp+0x1a>
 8005802:	7803      	ldrb	r3, [r0, #0]
 8005804:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005808:	42a3      	cmp	r3, r4
 800580a:	d001      	beq.n	8005810 <memcmp+0x1c>
 800580c:	1b18      	subs	r0, r3, r4
 800580e:	bd10      	pop	{r4, pc}
 8005810:	3001      	adds	r0, #1
 8005812:	e7f2      	b.n	80057fa <memcmp+0x6>

08005814 <memset>:
 8005814:	4603      	mov	r3, r0
 8005816:	4402      	add	r2, r0
 8005818:	4293      	cmp	r3, r2
 800581a:	d100      	bne.n	800581e <memset+0xa>
 800581c:	4770      	bx	lr
 800581e:	f803 1b01 	strb.w	r1, [r3], #1
 8005822:	e7f9      	b.n	8005818 <memset+0x4>

08005824 <_close_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	2300      	movs	r3, #0
 8005828:	4d05      	ldr	r5, [pc, #20]	; (8005840 <_close_r+0x1c>)
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	f7fc f960 	bl	8001af4 <_close>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_close_r+0x1a>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_close_r+0x1a>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20000794 	.word	0x20000794

08005844 <_lseek_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	2200      	movs	r2, #0
 800584e:	4d05      	ldr	r5, [pc, #20]	; (8005864 <_lseek_r+0x20>)
 8005850:	602a      	str	r2, [r5, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	f7fc f972 	bl	8001b3c <_lseek>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_lseek_r+0x1e>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_lseek_r+0x1e>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	20000794 	.word	0x20000794

08005868 <_read_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	2200      	movs	r2, #0
 8005872:	4d05      	ldr	r5, [pc, #20]	; (8005888 <_read_r+0x20>)
 8005874:	602a      	str	r2, [r5, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fc f91f 	bl	8001aba <_read>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_read_r+0x1e>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_read_r+0x1e>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	20000794 	.word	0x20000794

0800588c <_sbrk_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	2300      	movs	r3, #0
 8005890:	4d05      	ldr	r5, [pc, #20]	; (80058a8 <_sbrk_r+0x1c>)
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	602b      	str	r3, [r5, #0]
 8005898:	f7fc f95c 	bl	8001b54 <_sbrk>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_sbrk_r+0x1a>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_sbrk_r+0x1a>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	20000794 	.word	0x20000794

080058ac <_write_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	2200      	movs	r2, #0
 80058b6:	4d05      	ldr	r5, [pc, #20]	; (80058cc <_write_r+0x20>)
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7fa fe04 	bl	80004c8 <_write>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_write_r+0x1e>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_write_r+0x1e>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	20000794 	.word	0x20000794

080058d0 <__errno>:
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <__errno+0x8>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000284 	.word	0x20000284

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	2600      	movs	r6, #0
 80058e0:	4d0c      	ldr	r5, [pc, #48]	; (8005914 <__libc_init_array+0x38>)
 80058e2:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	42a6      	cmp	r6, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	f000 fcee 	bl	80062cc <_init>
 80058f0:	2600      	movs	r6, #0
 80058f2:	4d0a      	ldr	r5, [pc, #40]	; (800591c <__libc_init_array+0x40>)
 80058f4:	4c0a      	ldr	r4, [pc, #40]	; (8005920 <__libc_init_array+0x44>)
 80058f6:	1b64      	subs	r4, r4, r5
 80058f8:	10a4      	asrs	r4, r4, #2
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f855 3b04 	ldr.w	r3, [r5], #4
 8005904:	4798      	blx	r3
 8005906:	3601      	adds	r6, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f855 3b04 	ldr.w	r3, [r5], #4
 800590e:	4798      	blx	r3
 8005910:	3601      	adds	r6, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	080065b4 	.word	0x080065b4
 8005918:	080065b4 	.word	0x080065b4
 800591c:	080065b4 	.word	0x080065b4
 8005920:	080065b8 	.word	0x080065b8

08005924 <__retarget_lock_init_recursive>:
 8005924:	4770      	bx	lr

08005926 <__retarget_lock_acquire_recursive>:
 8005926:	4770      	bx	lr

08005928 <__retarget_lock_release_recursive>:
 8005928:	4770      	bx	lr

0800592a <memcpy>:
 800592a:	440a      	add	r2, r1
 800592c:	4291      	cmp	r1, r2
 800592e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005932:	d100      	bne.n	8005936 <memcpy+0xc>
 8005934:	4770      	bx	lr
 8005936:	b510      	push	{r4, lr}
 8005938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800593c:	4291      	cmp	r1, r2
 800593e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005942:	d1f9      	bne.n	8005938 <memcpy+0xe>
 8005944:	bd10      	pop	{r4, pc}
	...

08005948 <_free_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4605      	mov	r5, r0
 800594c:	2900      	cmp	r1, #0
 800594e:	d040      	beq.n	80059d2 <_free_r+0x8a>
 8005950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005954:	1f0c      	subs	r4, r1, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfb8      	it	lt
 800595a:	18e4      	addlt	r4, r4, r3
 800595c:	f7ff fcda 	bl	8005314 <__malloc_lock>
 8005960:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <_free_r+0x8c>)
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	b933      	cbnz	r3, 8005974 <_free_r+0x2c>
 8005966:	6063      	str	r3, [r4, #4]
 8005968:	6014      	str	r4, [r2, #0]
 800596a:	4628      	mov	r0, r5
 800596c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005970:	f7ff bcd6 	b.w	8005320 <__malloc_unlock>
 8005974:	42a3      	cmp	r3, r4
 8005976:	d908      	bls.n	800598a <_free_r+0x42>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	1821      	adds	r1, r4, r0
 800597c:	428b      	cmp	r3, r1
 800597e:	bf01      	itttt	eq
 8005980:	6819      	ldreq	r1, [r3, #0]
 8005982:	685b      	ldreq	r3, [r3, #4]
 8005984:	1809      	addeq	r1, r1, r0
 8005986:	6021      	streq	r1, [r4, #0]
 8005988:	e7ed      	b.n	8005966 <_free_r+0x1e>
 800598a:	461a      	mov	r2, r3
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	b10b      	cbz	r3, 8005994 <_free_r+0x4c>
 8005990:	42a3      	cmp	r3, r4
 8005992:	d9fa      	bls.n	800598a <_free_r+0x42>
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	1850      	adds	r0, r2, r1
 8005998:	42a0      	cmp	r0, r4
 800599a:	d10b      	bne.n	80059b4 <_free_r+0x6c>
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	4401      	add	r1, r0
 80059a0:	1850      	adds	r0, r2, r1
 80059a2:	4283      	cmp	r3, r0
 80059a4:	6011      	str	r1, [r2, #0]
 80059a6:	d1e0      	bne.n	800596a <_free_r+0x22>
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4408      	add	r0, r1
 80059ae:	6010      	str	r0, [r2, #0]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	e7da      	b.n	800596a <_free_r+0x22>
 80059b4:	d902      	bls.n	80059bc <_free_r+0x74>
 80059b6:	230c      	movs	r3, #12
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	e7d6      	b.n	800596a <_free_r+0x22>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	1821      	adds	r1, r4, r0
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bf01      	itttt	eq
 80059c4:	6819      	ldreq	r1, [r3, #0]
 80059c6:	685b      	ldreq	r3, [r3, #4]
 80059c8:	1809      	addeq	r1, r1, r0
 80059ca:	6021      	streq	r1, [r4, #0]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	6054      	str	r4, [r2, #4]
 80059d0:	e7cb      	b.n	800596a <_free_r+0x22>
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000650 	.word	0x20000650

080059d8 <__ssputs_r>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	461f      	mov	r7, r3
 80059de:	688e      	ldr	r6, [r1, #8]
 80059e0:	4682      	mov	sl, r0
 80059e2:	42be      	cmp	r6, r7
 80059e4:	460c      	mov	r4, r1
 80059e6:	4690      	mov	r8, r2
 80059e8:	680b      	ldr	r3, [r1, #0]
 80059ea:	d82c      	bhi.n	8005a46 <__ssputs_r+0x6e>
 80059ec:	898a      	ldrh	r2, [r1, #12]
 80059ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059f2:	d026      	beq.n	8005a42 <__ssputs_r+0x6a>
 80059f4:	6965      	ldr	r5, [r4, #20]
 80059f6:	6909      	ldr	r1, [r1, #16]
 80059f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059fc:	eba3 0901 	sub.w	r9, r3, r1
 8005a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a04:	1c7b      	adds	r3, r7, #1
 8005a06:	444b      	add	r3, r9
 8005a08:	106d      	asrs	r5, r5, #1
 8005a0a:	429d      	cmp	r5, r3
 8005a0c:	bf38      	it	cc
 8005a0e:	461d      	movcc	r5, r3
 8005a10:	0553      	lsls	r3, r2, #21
 8005a12:	d527      	bpl.n	8005a64 <__ssputs_r+0x8c>
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7ff fbfd 	bl	8005214 <_malloc_r>
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	b360      	cbz	r0, 8005a78 <__ssputs_r+0xa0>
 8005a1e:	464a      	mov	r2, r9
 8005a20:	6921      	ldr	r1, [r4, #16]
 8005a22:	f7ff ff82 	bl	800592a <memcpy>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	6126      	str	r6, [r4, #16]
 8005a34:	444e      	add	r6, r9
 8005a36:	6026      	str	r6, [r4, #0]
 8005a38:	463e      	mov	r6, r7
 8005a3a:	6165      	str	r5, [r4, #20]
 8005a3c:	eba5 0509 	sub.w	r5, r5, r9
 8005a40:	60a5      	str	r5, [r4, #8]
 8005a42:	42be      	cmp	r6, r7
 8005a44:	d900      	bls.n	8005a48 <__ssputs_r+0x70>
 8005a46:	463e      	mov	r6, r7
 8005a48:	4632      	mov	r2, r6
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	f000 fbba 	bl	80061c6 <memmove>
 8005a52:	2000      	movs	r0, #0
 8005a54:	68a3      	ldr	r3, [r4, #8]
 8005a56:	1b9b      	subs	r3, r3, r6
 8005a58:	60a3      	str	r3, [r4, #8]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	4433      	add	r3, r6
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a64:	462a      	mov	r2, r5
 8005a66:	f000 fbf9 	bl	800625c <_realloc_r>
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1e0      	bne.n	8005a32 <__ssputs_r+0x5a>
 8005a70:	4650      	mov	r0, sl
 8005a72:	6921      	ldr	r1, [r4, #16]
 8005a74:	f7ff ff68 	bl	8005948 <_free_r>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	f8ca 3000 	str.w	r3, [sl]
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	e7e9      	b.n	8005a60 <__ssputs_r+0x88>

08005a8c <_svfiprintf_r>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	4698      	mov	r8, r3
 8005a92:	898b      	ldrh	r3, [r1, #12]
 8005a94:	4607      	mov	r7, r0
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	460d      	mov	r5, r1
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	b09d      	sub	sp, #116	; 0x74
 8005a9e:	d50e      	bpl.n	8005abe <_svfiprintf_r+0x32>
 8005aa0:	690b      	ldr	r3, [r1, #16]
 8005aa2:	b963      	cbnz	r3, 8005abe <_svfiprintf_r+0x32>
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	f7ff fbb5 	bl	8005214 <_malloc_r>
 8005aaa:	6028      	str	r0, [r5, #0]
 8005aac:	6128      	str	r0, [r5, #16]
 8005aae:	b920      	cbnz	r0, 8005aba <_svfiprintf_r+0x2e>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab8:	e0d0      	b.n	8005c5c <_svfiprintf_r+0x1d0>
 8005aba:	2340      	movs	r3, #64	; 0x40
 8005abc:	616b      	str	r3, [r5, #20]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ac8:	2330      	movs	r3, #48	; 0x30
 8005aca:	f04f 0901 	mov.w	r9, #1
 8005ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c74 <_svfiprintf_r+0x1e8>
 8005ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ada:	4623      	mov	r3, r4
 8005adc:	469a      	mov	sl, r3
 8005ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae2:	b10a      	cbz	r2, 8005ae8 <_svfiprintf_r+0x5c>
 8005ae4:	2a25      	cmp	r2, #37	; 0x25
 8005ae6:	d1f9      	bne.n	8005adc <_svfiprintf_r+0x50>
 8005ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8005aec:	d00b      	beq.n	8005b06 <_svfiprintf_r+0x7a>
 8005aee:	465b      	mov	r3, fp
 8005af0:	4622      	mov	r2, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	4638      	mov	r0, r7
 8005af6:	f7ff ff6f 	bl	80059d8 <__ssputs_r>
 8005afa:	3001      	adds	r0, #1
 8005afc:	f000 80a9 	beq.w	8005c52 <_svfiprintf_r+0x1c6>
 8005b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b02:	445a      	add	r2, fp
 8005b04:	9209      	str	r2, [sp, #36]	; 0x24
 8005b06:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a1 	beq.w	8005c52 <_svfiprintf_r+0x1c6>
 8005b10:	2300      	movs	r3, #0
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b1a:	f10a 0a01 	add.w	sl, sl, #1
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	9307      	str	r3, [sp, #28]
 8005b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b26:	931a      	str	r3, [sp, #104]	; 0x68
 8005b28:	4654      	mov	r4, sl
 8005b2a:	2205      	movs	r2, #5
 8005b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b30:	4850      	ldr	r0, [pc, #320]	; (8005c74 <_svfiprintf_r+0x1e8>)
 8005b32:	f000 fb85 	bl	8006240 <memchr>
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	b9d8      	cbnz	r0, 8005b72 <_svfiprintf_r+0xe6>
 8005b3a:	06d0      	lsls	r0, r2, #27
 8005b3c:	bf44      	itt	mi
 8005b3e:	2320      	movmi	r3, #32
 8005b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b44:	0711      	lsls	r1, r2, #28
 8005b46:	bf44      	itt	mi
 8005b48:	232b      	movmi	r3, #43	; 0x2b
 8005b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b52:	2b2a      	cmp	r3, #42	; 0x2a
 8005b54:	d015      	beq.n	8005b82 <_svfiprintf_r+0xf6>
 8005b56:	4654      	mov	r4, sl
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f04f 0c0a 	mov.w	ip, #10
 8005b5e:	9a07      	ldr	r2, [sp, #28]
 8005b60:	4621      	mov	r1, r4
 8005b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b66:	3b30      	subs	r3, #48	; 0x30
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d94d      	bls.n	8005c08 <_svfiprintf_r+0x17c>
 8005b6c:	b1b0      	cbz	r0, 8005b9c <_svfiprintf_r+0x110>
 8005b6e:	9207      	str	r2, [sp, #28]
 8005b70:	e014      	b.n	8005b9c <_svfiprintf_r+0x110>
 8005b72:	eba0 0308 	sub.w	r3, r0, r8
 8005b76:	fa09 f303 	lsl.w	r3, r9, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	46a2      	mov	sl, r4
 8005b7e:	9304      	str	r3, [sp, #16]
 8005b80:	e7d2      	b.n	8005b28 <_svfiprintf_r+0x9c>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	1d19      	adds	r1, r3, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	9103      	str	r1, [sp, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bfbb      	ittet	lt
 8005b8e:	425b      	neglt	r3, r3
 8005b90:	f042 0202 	orrlt.w	r2, r2, #2
 8005b94:	9307      	strge	r3, [sp, #28]
 8005b96:	9307      	strlt	r3, [sp, #28]
 8005b98:	bfb8      	it	lt
 8005b9a:	9204      	strlt	r2, [sp, #16]
 8005b9c:	7823      	ldrb	r3, [r4, #0]
 8005b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba0:	d10c      	bne.n	8005bbc <_svfiprintf_r+0x130>
 8005ba2:	7863      	ldrb	r3, [r4, #1]
 8005ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba6:	d134      	bne.n	8005c12 <_svfiprintf_r+0x186>
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	3402      	adds	r4, #2
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	9203      	str	r2, [sp, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bfb8      	it	lt
 8005bb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c78 <_svfiprintf_r+0x1ec>
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	7821      	ldrb	r1, [r4, #0]
 8005bc6:	f000 fb3b 	bl	8006240 <memchr>
 8005bca:	b138      	cbz	r0, 8005bdc <_svfiprintf_r+0x150>
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	9b04      	ldr	r3, [sp, #16]
 8005bd0:	eba0 000a 	sub.w	r0, r0, sl
 8005bd4:	4082      	lsls	r2, r0
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	3401      	adds	r4, #1
 8005bda:	9304      	str	r3, [sp, #16]
 8005bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be0:	2206      	movs	r2, #6
 8005be2:	4826      	ldr	r0, [pc, #152]	; (8005c7c <_svfiprintf_r+0x1f0>)
 8005be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005be8:	f000 fb2a 	bl	8006240 <memchr>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d038      	beq.n	8005c62 <_svfiprintf_r+0x1d6>
 8005bf0:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <_svfiprintf_r+0x1f4>)
 8005bf2:	bb1b      	cbnz	r3, 8005c3c <_svfiprintf_r+0x1b0>
 8005bf4:	9b03      	ldr	r3, [sp, #12]
 8005bf6:	3307      	adds	r3, #7
 8005bf8:	f023 0307 	bic.w	r3, r3, #7
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	9303      	str	r3, [sp, #12]
 8005c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c02:	4433      	add	r3, r6
 8005c04:	9309      	str	r3, [sp, #36]	; 0x24
 8005c06:	e768      	b.n	8005ada <_svfiprintf_r+0x4e>
 8005c08:	460c      	mov	r4, r1
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c10:	e7a6      	b.n	8005b60 <_svfiprintf_r+0xd4>
 8005c12:	2300      	movs	r3, #0
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	4619      	mov	r1, r3
 8005c1a:	3401      	adds	r4, #1
 8005c1c:	9305      	str	r3, [sp, #20]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c24:	3a30      	subs	r2, #48	; 0x30
 8005c26:	2a09      	cmp	r2, #9
 8005c28:	d903      	bls.n	8005c32 <_svfiprintf_r+0x1a6>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0c6      	beq.n	8005bbc <_svfiprintf_r+0x130>
 8005c2e:	9105      	str	r1, [sp, #20]
 8005c30:	e7c4      	b.n	8005bbc <_svfiprintf_r+0x130>
 8005c32:	4604      	mov	r4, r0
 8005c34:	2301      	movs	r3, #1
 8005c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c3a:	e7f0      	b.n	8005c1e <_svfiprintf_r+0x192>
 8005c3c:	ab03      	add	r3, sp, #12
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	462a      	mov	r2, r5
 8005c42:	4638      	mov	r0, r7
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <_svfiprintf_r+0x1f8>)
 8005c46:	a904      	add	r1, sp, #16
 8005c48:	f3af 8000 	nop.w
 8005c4c:	1c42      	adds	r2, r0, #1
 8005c4e:	4606      	mov	r6, r0
 8005c50:	d1d6      	bne.n	8005c00 <_svfiprintf_r+0x174>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	065b      	lsls	r3, r3, #25
 8005c56:	f53f af2d 	bmi.w	8005ab4 <_svfiprintf_r+0x28>
 8005c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c5c:	b01d      	add	sp, #116	; 0x74
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c62:	ab03      	add	r3, sp, #12
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	462a      	mov	r2, r5
 8005c68:	4638      	mov	r0, r7
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <_svfiprintf_r+0x1f8>)
 8005c6c:	a904      	add	r1, sp, #16
 8005c6e:	f000 f87d 	bl	8005d6c <_printf_i>
 8005c72:	e7eb      	b.n	8005c4c <_svfiprintf_r+0x1c0>
 8005c74:	08006578 	.word	0x08006578
 8005c78:	0800657e 	.word	0x0800657e
 8005c7c:	08006582 	.word	0x08006582
 8005c80:	00000000 	.word	0x00000000
 8005c84:	080059d9 	.word	0x080059d9

08005c88 <_printf_common>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	4699      	mov	r9, r3
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	4607      	mov	r7, r0
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bfb8      	it	lt
 8005c9a:	4613      	movlt	r3, r2
 8005c9c:	6033      	str	r3, [r6, #0]
 8005c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ca8:	b10a      	cbz	r2, 8005cae <_printf_common+0x26>
 8005caa:	3301      	adds	r3, #1
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0699      	lsls	r1, r3, #26
 8005cb2:	bf42      	ittt	mi
 8005cb4:	6833      	ldrmi	r3, [r6, #0]
 8005cb6:	3302      	addmi	r3, #2
 8005cb8:	6033      	strmi	r3, [r6, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	f015 0506 	ands.w	r5, r5, #6
 8005cc0:	d106      	bne.n	8005cd0 <_printf_common+0x48>
 8005cc2:	f104 0a19 	add.w	sl, r4, #25
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	6832      	ldr	r2, [r6, #0]
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc2b      	bgt.n	8005d28 <_printf_common+0xa0>
 8005cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd4:	1e13      	subs	r3, r2, #0
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	0692      	lsls	r2, r2, #26
 8005cde:	d430      	bmi.n	8005d42 <_printf_common+0xba>
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d023      	beq.n	8005d36 <_printf_common+0xae>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	f003 0306 	and.w	r3, r3, #6
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	bf14      	ite	ne
 8005cfa:	2500      	movne	r5, #0
 8005cfc:	6833      	ldreq	r3, [r6, #0]
 8005cfe:	f04f 0600 	mov.w	r6, #0
 8005d02:	bf08      	it	eq
 8005d04:	68e5      	ldreq	r5, [r4, #12]
 8005d06:	f104 041a 	add.w	r4, r4, #26
 8005d0a:	bf08      	it	eq
 8005d0c:	1aed      	subeq	r5, r5, r3
 8005d0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d12:	bf08      	it	eq
 8005d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfc4      	itt	gt
 8005d1c:	1a9b      	subgt	r3, r3, r2
 8005d1e:	18ed      	addgt	r5, r5, r3
 8005d20:	42b5      	cmp	r5, r6
 8005d22:	d11a      	bne.n	8005d5a <_printf_common+0xd2>
 8005d24:	2000      	movs	r0, #0
 8005d26:	e008      	b.n	8005d3a <_printf_common+0xb2>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c0      	blx	r8
 8005d32:	3001      	adds	r0, #1
 8005d34:	d103      	bne.n	8005d3e <_printf_common+0xb6>
 8005d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3e:	3501      	adds	r5, #1
 8005d40:	e7c1      	b.n	8005cc6 <_printf_common+0x3e>
 8005d42:	2030      	movs	r0, #48	; 0x30
 8005d44:	18e1      	adds	r1, r4, r3
 8005d46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d50:	4422      	add	r2, r4
 8005d52:	3302      	adds	r3, #2
 8005d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d58:	e7c2      	b.n	8005ce0 <_printf_common+0x58>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4638      	mov	r0, r7
 8005d62:	47c0      	blx	r8
 8005d64:	3001      	adds	r0, #1
 8005d66:	d0e6      	beq.n	8005d36 <_printf_common+0xae>
 8005d68:	3601      	adds	r6, #1
 8005d6a:	e7d9      	b.n	8005d20 <_printf_common+0x98>

08005d6c <_printf_i>:
 8005d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	7e0f      	ldrb	r7, [r1, #24]
 8005d72:	4691      	mov	r9, r2
 8005d74:	2f78      	cmp	r7, #120	; 0x78
 8005d76:	4680      	mov	r8, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	469a      	mov	sl, r3
 8005d7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d82:	d807      	bhi.n	8005d94 <_printf_i+0x28>
 8005d84:	2f62      	cmp	r7, #98	; 0x62
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x32>
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f000 80d5 	beq.w	8005f38 <_printf_i+0x1cc>
 8005d8e:	2f58      	cmp	r7, #88	; 0x58
 8005d90:	f000 80c1 	beq.w	8005f16 <_printf_i+0x1aa>
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d9c:	e03a      	b.n	8005e14 <_printf_i+0xa8>
 8005d9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005da2:	2b15      	cmp	r3, #21
 8005da4:	d8f6      	bhi.n	8005d94 <_printf_i+0x28>
 8005da6:	a101      	add	r1, pc, #4	; (adr r1, 8005dac <_printf_i+0x40>)
 8005da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005d95 	.word	0x08005d95
 8005db8:	08005d95 	.word	0x08005d95
 8005dbc:	08005d95 	.word	0x08005d95
 8005dc0:	08005d95 	.word	0x08005d95
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005d95 	.word	0x08005d95
 8005dcc:	08005d95 	.word	0x08005d95
 8005dd0:	08005d95 	.word	0x08005d95
 8005dd4:	08005d95 	.word	0x08005d95
 8005dd8:	08005f1f 	.word	0x08005f1f
 8005ddc:	08005e45 	.word	0x08005e45
 8005de0:	08005ed9 	.word	0x08005ed9
 8005de4:	08005d95 	.word	0x08005d95
 8005de8:	08005d95 	.word	0x08005d95
 8005dec:	08005f41 	.word	0x08005f41
 8005df0:	08005d95 	.word	0x08005d95
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005d95 	.word	0x08005d95
 8005dfc:	08005d95 	.word	0x08005d95
 8005e00:	08005ee1 	.word	0x08005ee1
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	602a      	str	r2, [r5, #0]
 8005e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0a0      	b.n	8005f5a <_printf_i+0x1ee>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	0607      	lsls	r7, r0, #24
 8005e1e:	f103 0104 	add.w	r1, r3, #4
 8005e22:	6029      	str	r1, [r5, #0]
 8005e24:	d501      	bpl.n	8005e2a <_printf_i+0xbe>
 8005e26:	681e      	ldr	r6, [r3, #0]
 8005e28:	e003      	b.n	8005e32 <_printf_i+0xc6>
 8005e2a:	0646      	lsls	r6, r0, #25
 8005e2c:	d5fb      	bpl.n	8005e26 <_printf_i+0xba>
 8005e2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	da03      	bge.n	8005e3e <_printf_i+0xd2>
 8005e36:	232d      	movs	r3, #45	; 0x2d
 8005e38:	4276      	negs	r6, r6
 8005e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3e:	230a      	movs	r3, #10
 8005e40:	4859      	ldr	r0, [pc, #356]	; (8005fa8 <_printf_i+0x23c>)
 8005e42:	e012      	b.n	8005e6a <_printf_i+0xfe>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	1d19      	adds	r1, r3, #4
 8005e4a:	6029      	str	r1, [r5, #0]
 8005e4c:	0605      	lsls	r5, r0, #24
 8005e4e:	d501      	bpl.n	8005e54 <_printf_i+0xe8>
 8005e50:	681e      	ldr	r6, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <_printf_i+0xee>
 8005e54:	0641      	lsls	r1, r0, #25
 8005e56:	d5fb      	bpl.n	8005e50 <_printf_i+0xe4>
 8005e58:	881e      	ldrh	r6, [r3, #0]
 8005e5a:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5c:	bf0c      	ite	eq
 8005e5e:	2308      	moveq	r3, #8
 8005e60:	230a      	movne	r3, #10
 8005e62:	4851      	ldr	r0, [pc, #324]	; (8005fa8 <_printf_i+0x23c>)
 8005e64:	2100      	movs	r1, #0
 8005e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e6a:	6865      	ldr	r5, [r4, #4]
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	bfa8      	it	ge
 8005e70:	6821      	ldrge	r1, [r4, #0]
 8005e72:	60a5      	str	r5, [r4, #8]
 8005e74:	bfa4      	itt	ge
 8005e76:	f021 0104 	bicge.w	r1, r1, #4
 8005e7a:	6021      	strge	r1, [r4, #0]
 8005e7c:	b90e      	cbnz	r6, 8005e82 <_printf_i+0x116>
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	d04b      	beq.n	8005f1a <_printf_i+0x1ae>
 8005e82:	4615      	mov	r5, r2
 8005e84:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e88:	fb03 6711 	mls	r7, r3, r1, r6
 8005e8c:	5dc7      	ldrb	r7, [r0, r7]
 8005e8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e92:	4637      	mov	r7, r6
 8005e94:	42bb      	cmp	r3, r7
 8005e96:	460e      	mov	r6, r1
 8005e98:	d9f4      	bls.n	8005e84 <_printf_i+0x118>
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d10b      	bne.n	8005eb6 <_printf_i+0x14a>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	07de      	lsls	r6, r3, #31
 8005ea2:	d508      	bpl.n	8005eb6 <_printf_i+0x14a>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	6861      	ldr	r1, [r4, #4]
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	bfde      	ittt	le
 8005eac:	2330      	movle	r3, #48	; 0x30
 8005eae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eb2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005eb6:	1b52      	subs	r2, r2, r5
 8005eb8:	6122      	str	r2, [r4, #16]
 8005eba:	464b      	mov	r3, r9
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f8cd a000 	str.w	sl, [sp]
 8005ec4:	aa03      	add	r2, sp, #12
 8005ec6:	f7ff fedf 	bl	8005c88 <_printf_common>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d14a      	bne.n	8005f64 <_printf_i+0x1f8>
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed2:	b004      	add	sp, #16
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f043 0320 	orr.w	r3, r3, #32
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	2778      	movs	r7, #120	; 0x78
 8005ee2:	4832      	ldr	r0, [pc, #200]	; (8005fac <_printf_i+0x240>)
 8005ee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	6829      	ldr	r1, [r5, #0]
 8005eec:	061f      	lsls	r7, r3, #24
 8005eee:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ef2:	d402      	bmi.n	8005efa <_printf_i+0x18e>
 8005ef4:	065f      	lsls	r7, r3, #25
 8005ef6:	bf48      	it	mi
 8005ef8:	b2b6      	uxthmi	r6, r6
 8005efa:	07df      	lsls	r7, r3, #31
 8005efc:	bf48      	it	mi
 8005efe:	f043 0320 	orrmi.w	r3, r3, #32
 8005f02:	6029      	str	r1, [r5, #0]
 8005f04:	bf48      	it	mi
 8005f06:	6023      	strmi	r3, [r4, #0]
 8005f08:	b91e      	cbnz	r6, 8005f12 <_printf_i+0x1a6>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	f023 0320 	bic.w	r3, r3, #32
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	2310      	movs	r3, #16
 8005f14:	e7a6      	b.n	8005e64 <_printf_i+0xf8>
 8005f16:	4824      	ldr	r0, [pc, #144]	; (8005fa8 <_printf_i+0x23c>)
 8005f18:	e7e4      	b.n	8005ee4 <_printf_i+0x178>
 8005f1a:	4615      	mov	r5, r2
 8005f1c:	e7bd      	b.n	8005e9a <_printf_i+0x12e>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	6826      	ldr	r6, [r4, #0]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	6961      	ldr	r1, [r4, #20]
 8005f26:	6028      	str	r0, [r5, #0]
 8005f28:	0635      	lsls	r5, r6, #24
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	d501      	bpl.n	8005f32 <_printf_i+0x1c6>
 8005f2e:	6019      	str	r1, [r3, #0]
 8005f30:	e002      	b.n	8005f38 <_printf_i+0x1cc>
 8005f32:	0670      	lsls	r0, r6, #25
 8005f34:	d5fb      	bpl.n	8005f2e <_printf_i+0x1c2>
 8005f36:	8019      	strh	r1, [r3, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4615      	mov	r5, r2
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	e7bc      	b.n	8005eba <_printf_i+0x14e>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	2100      	movs	r1, #0
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	602a      	str	r2, [r5, #0]
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	6862      	ldr	r2, [r4, #4]
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 f977 	bl	8006240 <memchr>
 8005f52:	b108      	cbz	r0, 8005f58 <_printf_i+0x1ec>
 8005f54:	1b40      	subs	r0, r0, r5
 8005f56:	6060      	str	r0, [r4, #4]
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f62:	e7aa      	b.n	8005eba <_printf_i+0x14e>
 8005f64:	462a      	mov	r2, r5
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	47d0      	blx	sl
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0ad      	beq.n	8005ece <_printf_i+0x162>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	079b      	lsls	r3, r3, #30
 8005f76:	d413      	bmi.n	8005fa0 <_printf_i+0x234>
 8005f78:	68e0      	ldr	r0, [r4, #12]
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	4298      	cmp	r0, r3
 8005f7e:	bfb8      	it	lt
 8005f80:	4618      	movlt	r0, r3
 8005f82:	e7a6      	b.n	8005ed2 <_printf_i+0x166>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4632      	mov	r2, r6
 8005f88:	4649      	mov	r1, r9
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	47d0      	blx	sl
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d09d      	beq.n	8005ece <_printf_i+0x162>
 8005f92:	3501      	adds	r5, #1
 8005f94:	68e3      	ldr	r3, [r4, #12]
 8005f96:	9903      	ldr	r1, [sp, #12]
 8005f98:	1a5b      	subs	r3, r3, r1
 8005f9a:	42ab      	cmp	r3, r5
 8005f9c:	dcf2      	bgt.n	8005f84 <_printf_i+0x218>
 8005f9e:	e7eb      	b.n	8005f78 <_printf_i+0x20c>
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	f104 0619 	add.w	r6, r4, #25
 8005fa6:	e7f5      	b.n	8005f94 <_printf_i+0x228>
 8005fa8:	08006589 	.word	0x08006589
 8005fac:	0800659a 	.word	0x0800659a

08005fb0 <__sflush_r>:
 8005fb0:	898a      	ldrh	r2, [r1, #12]
 8005fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	0710      	lsls	r0, r2, #28
 8005fb8:	460c      	mov	r4, r1
 8005fba:	d457      	bmi.n	800606c <__sflush_r+0xbc>
 8005fbc:	684b      	ldr	r3, [r1, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dc04      	bgt.n	8005fcc <__sflush_r+0x1c>
 8005fc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dc01      	bgt.n	8005fcc <__sflush_r+0x1c>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	d0fa      	beq.n	8005fc8 <__sflush_r+0x18>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fd8:	682f      	ldr	r7, [r5, #0]
 8005fda:	6a21      	ldr	r1, [r4, #32]
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	d032      	beq.n	8006046 <__sflush_r+0x96>
 8005fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	075a      	lsls	r2, r3, #29
 8005fe6:	d505      	bpl.n	8005ff4 <__sflush_r+0x44>
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	1ac0      	subs	r0, r0, r3
 8005fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fee:	b10b      	cbz	r3, 8005ff4 <__sflush_r+0x44>
 8005ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff2:	1ac0      	subs	r0, r0, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	6a21      	ldr	r1, [r4, #32]
 8005ffe:	47b0      	blx	r6
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	d106      	bne.n	8006014 <__sflush_r+0x64>
 8006006:	6829      	ldr	r1, [r5, #0]
 8006008:	291d      	cmp	r1, #29
 800600a:	d82b      	bhi.n	8006064 <__sflush_r+0xb4>
 800600c:	4a28      	ldr	r2, [pc, #160]	; (80060b0 <__sflush_r+0x100>)
 800600e:	410a      	asrs	r2, r1
 8006010:	07d6      	lsls	r6, r2, #31
 8006012:	d427      	bmi.n	8006064 <__sflush_r+0xb4>
 8006014:	2200      	movs	r2, #0
 8006016:	6062      	str	r2, [r4, #4]
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	04d9      	lsls	r1, r3, #19
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	d504      	bpl.n	800602a <__sflush_r+0x7a>
 8006020:	1c42      	adds	r2, r0, #1
 8006022:	d101      	bne.n	8006028 <__sflush_r+0x78>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b903      	cbnz	r3, 800602a <__sflush_r+0x7a>
 8006028:	6560      	str	r0, [r4, #84]	; 0x54
 800602a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602c:	602f      	str	r7, [r5, #0]
 800602e:	2900      	cmp	r1, #0
 8006030:	d0ca      	beq.n	8005fc8 <__sflush_r+0x18>
 8006032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006036:	4299      	cmp	r1, r3
 8006038:	d002      	beq.n	8006040 <__sflush_r+0x90>
 800603a:	4628      	mov	r0, r5
 800603c:	f7ff fc84 	bl	8005948 <_free_r>
 8006040:	2000      	movs	r0, #0
 8006042:	6360      	str	r0, [r4, #52]	; 0x34
 8006044:	e7c1      	b.n	8005fca <__sflush_r+0x1a>
 8006046:	2301      	movs	r3, #1
 8006048:	4628      	mov	r0, r5
 800604a:	47b0      	blx	r6
 800604c:	1c41      	adds	r1, r0, #1
 800604e:	d1c8      	bne.n	8005fe2 <__sflush_r+0x32>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c5      	beq.n	8005fe2 <__sflush_r+0x32>
 8006056:	2b1d      	cmp	r3, #29
 8006058:	d001      	beq.n	800605e <__sflush_r+0xae>
 800605a:	2b16      	cmp	r3, #22
 800605c:	d101      	bne.n	8006062 <__sflush_r+0xb2>
 800605e:	602f      	str	r7, [r5, #0]
 8006060:	e7b2      	b.n	8005fc8 <__sflush_r+0x18>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	e7ae      	b.n	8005fca <__sflush_r+0x1a>
 800606c:	690f      	ldr	r7, [r1, #16]
 800606e:	2f00      	cmp	r7, #0
 8006070:	d0aa      	beq.n	8005fc8 <__sflush_r+0x18>
 8006072:	0793      	lsls	r3, r2, #30
 8006074:	bf18      	it	ne
 8006076:	2300      	movne	r3, #0
 8006078:	680e      	ldr	r6, [r1, #0]
 800607a:	bf08      	it	eq
 800607c:	694b      	ldreq	r3, [r1, #20]
 800607e:	1bf6      	subs	r6, r6, r7
 8006080:	600f      	str	r7, [r1, #0]
 8006082:	608b      	str	r3, [r1, #8]
 8006084:	2e00      	cmp	r6, #0
 8006086:	dd9f      	ble.n	8005fc8 <__sflush_r+0x18>
 8006088:	4633      	mov	r3, r6
 800608a:	463a      	mov	r2, r7
 800608c:	4628      	mov	r0, r5
 800608e:	6a21      	ldr	r1, [r4, #32]
 8006090:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006094:	47e0      	blx	ip
 8006096:	2800      	cmp	r0, #0
 8006098:	dc06      	bgt.n	80060a8 <__sflush_r+0xf8>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a4:	81a3      	strh	r3, [r4, #12]
 80060a6:	e790      	b.n	8005fca <__sflush_r+0x1a>
 80060a8:	4407      	add	r7, r0
 80060aa:	1a36      	subs	r6, r6, r0
 80060ac:	e7ea      	b.n	8006084 <__sflush_r+0xd4>
 80060ae:	bf00      	nop
 80060b0:	dfbffffe 	.word	0xdfbffffe

080060b4 <_fflush_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	b913      	cbnz	r3, 80060c4 <_fflush_r+0x10>
 80060be:	2500      	movs	r5, #0
 80060c0:	4628      	mov	r0, r5
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	b118      	cbz	r0, 80060ce <_fflush_r+0x1a>
 80060c6:	6a03      	ldr	r3, [r0, #32]
 80060c8:	b90b      	cbnz	r3, 80060ce <_fflush_r+0x1a>
 80060ca:	f7ff f9bb 	bl	8005444 <__sinit>
 80060ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f3      	beq.n	80060be <_fflush_r+0xa>
 80060d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060d8:	07d0      	lsls	r0, r2, #31
 80060da:	d404      	bmi.n	80060e6 <_fflush_r+0x32>
 80060dc:	0599      	lsls	r1, r3, #22
 80060de:	d402      	bmi.n	80060e6 <_fflush_r+0x32>
 80060e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e2:	f7ff fc20 	bl	8005926 <__retarget_lock_acquire_recursive>
 80060e6:	4628      	mov	r0, r5
 80060e8:	4621      	mov	r1, r4
 80060ea:	f7ff ff61 	bl	8005fb0 <__sflush_r>
 80060ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060f0:	4605      	mov	r5, r0
 80060f2:	07da      	lsls	r2, r3, #31
 80060f4:	d4e4      	bmi.n	80060c0 <_fflush_r+0xc>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d4e1      	bmi.n	80060c0 <_fflush_r+0xc>
 80060fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fe:	f7ff fc13 	bl	8005928 <__retarget_lock_release_recursive>
 8006102:	e7dd      	b.n	80060c0 <_fflush_r+0xc>

08006104 <__swhatbuf_r>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	460c      	mov	r4, r1
 8006108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610c:	4615      	mov	r5, r2
 800610e:	2900      	cmp	r1, #0
 8006110:	461e      	mov	r6, r3
 8006112:	b096      	sub	sp, #88	; 0x58
 8006114:	da0c      	bge.n	8006130 <__swhatbuf_r+0x2c>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	2100      	movs	r1, #0
 800611a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800611e:	bf0c      	ite	eq
 8006120:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006124:	2340      	movne	r3, #64	; 0x40
 8006126:	2000      	movs	r0, #0
 8006128:	6031      	str	r1, [r6, #0]
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	b016      	add	sp, #88	; 0x58
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	466a      	mov	r2, sp
 8006132:	f000 f863 	bl	80061fc <_fstat_r>
 8006136:	2800      	cmp	r0, #0
 8006138:	dbed      	blt.n	8006116 <__swhatbuf_r+0x12>
 800613a:	9901      	ldr	r1, [sp, #4]
 800613c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006140:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006144:	4259      	negs	r1, r3
 8006146:	4159      	adcs	r1, r3
 8006148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614c:	e7eb      	b.n	8006126 <__swhatbuf_r+0x22>

0800614e <__smakebuf_r>:
 800614e:	898b      	ldrh	r3, [r1, #12]
 8006150:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006152:	079d      	lsls	r5, r3, #30
 8006154:	4606      	mov	r6, r0
 8006156:	460c      	mov	r4, r1
 8006158:	d507      	bpl.n	800616a <__smakebuf_r+0x1c>
 800615a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	2301      	movs	r3, #1
 8006164:	6163      	str	r3, [r4, #20]
 8006166:	b002      	add	sp, #8
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	466a      	mov	r2, sp
 800616c:	ab01      	add	r3, sp, #4
 800616e:	f7ff ffc9 	bl	8006104 <__swhatbuf_r>
 8006172:	9900      	ldr	r1, [sp, #0]
 8006174:	4605      	mov	r5, r0
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff f84c 	bl	8005214 <_malloc_r>
 800617c:	b948      	cbnz	r0, 8006192 <__smakebuf_r+0x44>
 800617e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006182:	059a      	lsls	r2, r3, #22
 8006184:	d4ef      	bmi.n	8006166 <__smakebuf_r+0x18>
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	f043 0302 	orr.w	r3, r3, #2
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	e7e3      	b.n	800615a <__smakebuf_r+0xc>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	6020      	str	r0, [r4, #0]
 8006196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	9b00      	ldr	r3, [sp, #0]
 800619e:	6120      	str	r0, [r4, #16]
 80061a0:	6163      	str	r3, [r4, #20]
 80061a2:	9b01      	ldr	r3, [sp, #4]
 80061a4:	b15b      	cbz	r3, 80061be <__smakebuf_r+0x70>
 80061a6:	4630      	mov	r0, r6
 80061a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ac:	f000 f838 	bl	8006220 <_isatty_r>
 80061b0:	b128      	cbz	r0, 80061be <__smakebuf_r+0x70>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f023 0303 	bic.w	r3, r3, #3
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	431d      	orrs	r5, r3
 80061c2:	81a5      	strh	r5, [r4, #12]
 80061c4:	e7cf      	b.n	8006166 <__smakebuf_r+0x18>

080061c6 <memmove>:
 80061c6:	4288      	cmp	r0, r1
 80061c8:	b510      	push	{r4, lr}
 80061ca:	eb01 0402 	add.w	r4, r1, r2
 80061ce:	d902      	bls.n	80061d6 <memmove+0x10>
 80061d0:	4284      	cmp	r4, r0
 80061d2:	4623      	mov	r3, r4
 80061d4:	d807      	bhi.n	80061e6 <memmove+0x20>
 80061d6:	1e43      	subs	r3, r0, #1
 80061d8:	42a1      	cmp	r1, r4
 80061da:	d008      	beq.n	80061ee <memmove+0x28>
 80061dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061e4:	e7f8      	b.n	80061d8 <memmove+0x12>
 80061e6:	4601      	mov	r1, r0
 80061e8:	4402      	add	r2, r0
 80061ea:	428a      	cmp	r2, r1
 80061ec:	d100      	bne.n	80061f0 <memmove+0x2a>
 80061ee:	bd10      	pop	{r4, pc}
 80061f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061f8:	e7f7      	b.n	80061ea <memmove+0x24>
	...

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	2300      	movs	r3, #0
 8006200:	4d06      	ldr	r5, [pc, #24]	; (800621c <_fstat_r+0x20>)
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fb fc7e 	bl	8001b0a <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	20000794 	.word	0x20000794

08006220 <_isatty_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	2300      	movs	r3, #0
 8006224:	4d05      	ldr	r5, [pc, #20]	; (800623c <_isatty_r+0x1c>)
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb fc7c 	bl	8001b28 <_isatty>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_isatty_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_isatty_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000794 	.word	0x20000794

08006240 <memchr>:
 8006240:	4603      	mov	r3, r0
 8006242:	b510      	push	{r4, lr}
 8006244:	b2c9      	uxtb	r1, r1
 8006246:	4402      	add	r2, r0
 8006248:	4293      	cmp	r3, r2
 800624a:	4618      	mov	r0, r3
 800624c:	d101      	bne.n	8006252 <memchr+0x12>
 800624e:	2000      	movs	r0, #0
 8006250:	e003      	b.n	800625a <memchr+0x1a>
 8006252:	7804      	ldrb	r4, [r0, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	428c      	cmp	r4, r1
 8006258:	d1f6      	bne.n	8006248 <memchr+0x8>
 800625a:	bd10      	pop	{r4, pc}

0800625c <_realloc_r>:
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	4680      	mov	r8, r0
 8006262:	4614      	mov	r4, r2
 8006264:	460e      	mov	r6, r1
 8006266:	b921      	cbnz	r1, 8006272 <_realloc_r+0x16>
 8006268:	4611      	mov	r1, r2
 800626a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	f7fe bfd1 	b.w	8005214 <_malloc_r>
 8006272:	b92a      	cbnz	r2, 8006280 <_realloc_r+0x24>
 8006274:	f7ff fb68 	bl	8005948 <_free_r>
 8006278:	4625      	mov	r5, r4
 800627a:	4628      	mov	r0, r5
 800627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006280:	f000 f81b 	bl	80062ba <_malloc_usable_size_r>
 8006284:	4284      	cmp	r4, r0
 8006286:	4607      	mov	r7, r0
 8006288:	d802      	bhi.n	8006290 <_realloc_r+0x34>
 800628a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800628e:	d812      	bhi.n	80062b6 <_realloc_r+0x5a>
 8006290:	4621      	mov	r1, r4
 8006292:	4640      	mov	r0, r8
 8006294:	f7fe ffbe 	bl	8005214 <_malloc_r>
 8006298:	4605      	mov	r5, r0
 800629a:	2800      	cmp	r0, #0
 800629c:	d0ed      	beq.n	800627a <_realloc_r+0x1e>
 800629e:	42bc      	cmp	r4, r7
 80062a0:	4622      	mov	r2, r4
 80062a2:	4631      	mov	r1, r6
 80062a4:	bf28      	it	cs
 80062a6:	463a      	movcs	r2, r7
 80062a8:	f7ff fb3f 	bl	800592a <memcpy>
 80062ac:	4631      	mov	r1, r6
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7ff fb4a 	bl	8005948 <_free_r>
 80062b4:	e7e1      	b.n	800627a <_realloc_r+0x1e>
 80062b6:	4635      	mov	r5, r6
 80062b8:	e7df      	b.n	800627a <_realloc_r+0x1e>

080062ba <_malloc_usable_size_r>:
 80062ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062be:	1f18      	subs	r0, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bfbc      	itt	lt
 80062c4:	580b      	ldrlt	r3, [r1, r0]
 80062c6:	18c0      	addlt	r0, r0, r3
 80062c8:	4770      	bx	lr
	...

080062cc <_init>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr

080062d8 <_fini>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr
